// === LogoScene ===
// Сцена с анимированным логотипом студии
class LogoScene extends Phaser.Scene {
    constructor() {
        super({ key: 'LogoScene' });
    }
    
    preload() {
        this.load.video('logo', './UI/Logo/corso-logo.mp4');
        // Предзагружаем изображение названия игры для следующей сцены
        this.load.image('game-title', './UI/Backgrounds/game-title.png');
    }
    
    create() {
        // Адаптивный размер под экран
        const video = this.add.video(
            this.scale.width / 2, 
            this.scale.height / 2, 
            'logo'
        );
        
        // Масштабирование для разных экранов
        const scaleX = this.scale.width / 1920;  // Full HD ширина
        const scaleY = this.scale.height / 1080; // Full HD высота
        const scale = Math.min(scaleX, scaleY);
        video.setScale(scale);
        
        video.play();
        
        // Создаем черный прямоугольник для затемнения (изначально прозрачный)
        const fadeOverlay = this.add.rectangle(
            this.scale.width / 2, 
            this.scale.height / 2, 
            this.scale.width, 
            this.scale.height, 
            0x000000
        );
        fadeOverlay.setAlpha(0);
        
        // Затемнение за 1 секунду до конца (на 4-й секунде)
        this.time.delayedCall(4000, () => {
            this.tweens.add({
                targets: fadeOverlay,
                alpha: 1,
                duration: 1000,
                ease: 'Linear'
            });
        });
        
        // Переход к названию игры после окончания видео
        video.on('complete', () => {
            this.scene.start('GameTitleScene');
        });
        
        // Пропуск по клику/тапу
        this.input.once('pointerdown', () => {
            video.stop();
            this.scene.start('GameTitleScene');
        });
    }
}

// === GameTitleScene ===
// Сцена с названием игры
class GameTitleScene extends Phaser.Scene {
    constructor() {
        super({ key: 'GameTitleScene' });
    }
    
    preload() {
        // Если не загружено в предыдущей сцене
        if (!this.textures.exists('game-title')) {
            this.load.image('game-title', './UI/Backgrounds/game-title.png');
        }
    }
    
    create() {
        // Черный фон
        this.add.rectangle(
            this.scale.width / 2, 
            this.scale.height / 2, 
            this.scale.width, 
            this.scale.height, 
            0x000000
        );
        
        // Изображение названия игры (изначально прозрачное)
        const gameTitle = this.add.image(
            this.scale.width / 2, 
            this.scale.height / 2, 
            'game-title'
        );
        
        // Адаптивное масштабирование
        const scaleX = (this.scale.width * 0.8) / gameTitle.width;
        const scaleY = (this.scale.height * 0.6) / gameTitle.height;
        const scale = Math.min(scaleX, scaleY);
        gameTitle.setScale(scale);
        gameTitle.setAlpha(0);
        
        // Анимация появления названия
        this.tweens.add({
            targets: gameTitle,
            alpha: 1,
            duration: 1500,
            ease: 'Power2'
        });
        
        // Мерцающий эффект "Нажмите для продолжения"
        const continueText = this.add.text(
            this.scale.width / 2,
            this.scale.height * 0.85,
            'Нажмите для продолжения',
            {
                fontSize: Math.floor(this.scale.width * 0.025) + 'px',
                fill: '#ffffff',
                fontFamily: 'Arial, sans-serif'
            }
        );
        continueText.setOrigin(0.5);
        continueText.setAlpha(0);
        
        // Показать текст через 2 секунды и добавить мерцание
        this.time.delayedCall(2000, () => {
            this.tweens.add({
                targets: continueText,
                alpha: { from: 0, to: 1 },
                duration: 500,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut'
            });
        });
        
        // Переход в главное меню по клику/тапу (активируется через 1.5 сек)
        this.time.delayedCall(1500, () => {
            this.input.once('pointerdown', () => {
                // Затемнение перед переходом
                const fadeOverlay = this.add.rectangle(
                    this.scale.width / 2, 
                    this.scale.height / 2, 
                    this.scale.width, 
                    this.scale.height, 
                    0x000000
                );
                fadeOverlay.setAlpha(0);
                
                this.tweens.add({
                    targets: fadeOverlay,
                    alpha: 1,
                    duration: 500,
                    ease: 'Power2',
                    onComplete: () => {
                        this.scene.start('MainMenuScene');
                    }
                });
            });
        });
        
        // Автоматический переход через 8 секунд
        this.time.delayedCall(8000, () => {
            const fadeOverlay = this.add.rectangle(
                this.scale.width / 2, 
                this.scale.height / 2, 
                this.scale.width, 
                this.scale.height, 
                0x000000
            );
            fadeOverlay.setAlpha(0);
            
            this.tweens.add({
                targets: fadeOverlay,
                alpha: 1,
                duration: 500,
                ease: 'Power2',
                onComplete: () => {
                    this.scene.start('MainMenuScene');
                }
            });
        });
    }
}

// === LoadingScene ===
// Сцена загрузки. Отвечает за загрузку всех ресурсов и отображение экрана загрузки.
class LoadingScene extends Phaser.Scene {
    constructor() {
        super({ key: 'LoadingScene' }); // Указываем ключ для сцены.
    }

    preload() {
        const width = this.cameras.main.width; // Ширина экрана.
        const height = this.cameras.main.height; // Высота экрана.

        // Создаем экземпляр ResourceLoader.
        const resourceLoader = new ResourceLoader(this);

        // Определяем список всех ресурсов.
        const resources = {
            locations: [
                { key: 'front-house', path: 'front-house.jpg' },
                { key: 'hall', path: 'hall.jpg' },
                { key: 'leftroom', path: 'leftroom.jpg' },
                { key: 'rightroom', path: 'rightroom.jpg' },
                { key: 'drawer', path: 'drawer.jpg' },
                { key: 'wardrobe', path: 'wardrobe.jpg' }
            ],
            ui: [
                { key: 'hint-button', path: './UI/ApprovedUI/Hint.png' },
                { key: 'energy-icon', path: './UI/ApprovedUI/Energy.png' },
                { key: 'JournalButton', path: './UI/ApprovedUI/JournalButton.png' },
                { key: 'menu-btn', path: './UI/ApprovedUI/menu-btn.png' },
                { key: 'close', path: './UI/ApprovedUI/Close.png' },
                { key: 'popup-bg-item', path: './UI/PopupBackgrounds/ItemPopup.png' },
                { key: 'popup-bg-journal', path: './UI/PopupBackgrounds/JournalPopup.png' },
                { key: 'page', path: './UI/PopupBackgrounds/Page.png' },
                { key: 'popup-bg-small', path: './UI/PopupBackgrounds/SmallPopup.png' },
                { key: 'arrow', path: './UI/ApprovedUI/Arrow.png' },
                { key: 'loading-bg', path: './UI/Backgrounds/loading-bg.jpg' },
                { key: 'inventory-bg', path: './UI/ApprovedUI/inventory-bg.png' }
            ],
            objects: [
                { key: 'object1', path: 'plate.png' },
                { key: 'object2', path: 'candle.png' },
                { key: 'object3', path: 'art.png' },
                { key: 'object4', path: 'tea.png' },
                { key: 'object5', path: 'list1.png' },
                { key: 'object6', path: 'safe.png' },
                { key: 'object7', path: 'sheet.png' },
                { key: 'object8', path: 'ring.png' }
            ],
            additional: [
                { key: 'list2', path: 'list2.png' },
                { key: 'opensafe', path: 'opensafe.png' }
            ]
        };

        // Загружаем ресурсы через ResourceLoader.
        resourceLoader.loadResources(resources);

        // Когда загрузка завершена, отображаем фон загрузки и запускаем основной процесс.
        this.load.on('complete', () => {
            const bg = this.add.image(width / 2, height / 2, 'loading-bg')
                .setDisplaySize(width, height); // Устанавливаем размер фона.
            this.startMainLoading(); // Запускаем основной процесс загрузки.
        });

        this.load.start(); // Начинаем загрузку.
    }

    startMainLoading() {
        const width = this.cameras.main.width; // Ширина экрана.
        const height = this.cameras.main.height; // Высота экрана.

        // Создаем UI элементы загрузки.
        const progressUI = this.createProgressUI(width, height);

        // Загружаем оставшиеся ресурсы.
        const resources = {
            locations: [
                { key: 'front-house', path: 'front-house.jpg' },
                { key: 'hall', path: 'hall.jpg' }
            ],
            ui: [
                { key: 'hint-button', path: './UI/ApprovedUI/Hint.png' }
            ]
        };

        const resourceLoader = new ResourceLoader(this);
        resourceLoader.loadResources(resources);

        // Запускаем эмуляцию загрузки.
        this.startFakeLoading(progressUI);
    }

    createProgressUI(width, height) {
        // Создаем контейнер прогресс-бара.
        const progressBox = this.add.graphics()
            .lineStyle(1, 0x333333)
            .strokeRect(
                width / 2 - 500, // Позиция по X.
                height / 2 + 200, // Позиция по Y.
                1000, // Ширина прогресс-бара.
                1 // Высота прогресс-бара.
            );

        // Создаем заполнение прогресс-бара.
        const progressBar = this.add.graphics();

        return { progressBox, progressBar }; // Возвращаем элементы UI.
    }

    startFakeLoading({ progressBox, progressBar }) {
        let loadingProgress = 0; // Стартовое значение загрузки.
        const width = this.cameras.main.width; // Ширина экрана.
        const height = this.cameras.main.height; // Высота экрана.

        const updateProgress = () => {
            loadingProgress += 0.01; // Увеличиваем прогресс.
            progressBar.clear()
                .fillStyle(0xffffff, 1) // Устанавливаем цвет.
                .fillRect(
                    width / 2 - 500, // Позиция по X.
                    height / 2 + 200, // Позиция по Y.
                    1000 * loadingProgress, // Ширина прогресса.
                    1 // Высота прогресса.
                );

            if (loadingProgress < 1) {
                setTimeout(updateProgress, 50); // Продолжаем обновление.
            } else {
                this.finishLoading({ progressBox, progressBar }); // Завершаем загрузку.
            }
        };

        updateProgress(); // Запускаем обновление прогресса.
    }

    finishLoading({ progressBox, progressBar }) {
        setTimeout(() => {
            progressBar.destroy(); // Удаляем графику прогресса.
            progressBox.destroy(); // Удаляем графику контейнера.
            this.scene.start('MainMenuScene'); // Переходим к следующей сцене.
        }, 500); // Небольшая задержка перед переходом.
    }
}

// === MainMenuScene ===
class MainMenuScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MainMenuScene' });
        this.currentLanguage = 'en';
        this.languages = ['en', 'ua'];
        this.buttonLabels = {
            ua: ['ГРАТИ', 'ДОСЯГНЕННЯ', 'НАЛАШТУВАННЯ', 'ДОПОМОГА']
        };
    }

    preload() {
        this.load.image('main-bg', './UI/Backgrounds/main-bg.jpg');
        this.load.image('play-btn', './UI/ApprovedUI/play-btn.png');
        this.load.image('achiev-btn', './UI/ApprovedUI/achiev-btn.png');
        this.load.image('options-btn', './UI/ApprovedUI/options-btn.png');
        this.load.image('help-btn', './UI/ApprovedUI/help-btn.png');
    }

    create() {
        this.cameras.main.fadeIn(1000);

        this.add.image(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2, 'main-bg')
            .setDisplaySize(GAME_CONFIG.width, GAME_CONFIG.height);

        this.menuButtons = [
            { key: 'play-btn', width: 210, height: 75 },
            { key: 'achiev-btn', width: 472, height: 75 },
            { key: 'options-btn', width: 336, height: 75 },
            { key: 'help-btn', width: 223, height: 75 }
        ];

        const spacing = 40;
        const totalWidth =
            this.menuButtons.reduce((sum, btn) => sum + btn.width, 0) +
            spacing * (this.menuButtons.length - 1);

        let currentX = (GAME_CONFIG.width - totalWidth) / 2 + this.menuButtons[0].width / 2;
        const y = 100;

        this.menuBtnObjs = [];
        this.menuBtnLabels = [];

        const labels = this.currentLanguage === 'ua' ? this.buttonLabels.ua : ['', '', '', ''];

        this.menuButtons.forEach((btnInfo, i) => {
            const btn = this.add.sprite(currentX, y, btnInfo.key)
                .setOrigin(0.5)
                .setDisplaySize(btnInfo.width, btnInfo.height)
                .setInteractive({ useHandCursor: true });

            btn.on('pointerover', () => btn.setScale(1.06));
            btn.on('pointerout', () => btn.setScale(1));
            btn.on('pointerdown', () => this.menuClick(i));

            let label = null;
            if (labels[i]) {
                label = this.add.text(currentX, y + btnInfo.height / 2 + 30, labels[i], {
                    font: '28px Arial',
                    color: '#FFD700'
                }).setOrigin(0.5);
            }
            this.menuBtnObjs.push(btn);
            this.menuBtnLabels.push(label);

            if (i < this.menuButtons.length - 1) {
                currentX += (btnInfo.width / 2) + (this.menuButtons[i + 1].width / 2) + spacing;
            }
        });

        this.storyBtnsGroup = this.add.group();

        this.energy = 400;
        this.energyBar = this.add.rectangle(150, 1030, 400, 30, 0xffd700).setOrigin(0, 0.5);
        this.energyText = this.add.text(570, 1030, `${this.energy}/400`, {
            font: '28px Arial',
            color: '#FFD700'
        }).setOrigin(0, 0.5);
    }

    switchLanguage(nextLang) {
        if (!this.languages.includes(nextLang)) return;
        this.currentLanguage = nextLang;

        const labels = this.currentLanguage === 'ua' ? this.buttonLabels.ua : ['', '', '', ''];
        this.menuBtnLabels.forEach((labelObj, i) => {
            if (labelObj) labelObj.destroy();
            if (labels[i]) {
                const btn = this.menuBtnObjs[i];
                this.menuBtnLabels[i] = this.add.text(
                    btn.x,
                    btn.y + this.menuButtons[i].height / 2 + 30,
                    labels[i],
                    { font: '28px Arial', color: '#FFD700' }
                ).setOrigin(0.5);
            } else {
                this.menuBtnLabels[i] = null;
            }
        });
    }

    menuClick(btnIndex) {
        if (btnIndex === 0) {
            this.showStoryMenu();
        } else if (btnIndex === 2) {
            this.showOptionsMenu();
        } else {
            this.clearStoryMenu();
        }
    }

    showStoryMenu() {
        this.clearStoryMenu();
        const stories = ['Сейф', 'Особняк'];
        const startX = 800;
        const stepX = 220;
        const y = 200;

        stories.forEach((story, i) => {
            const btn = this.add.text(startX + i * stepX, y, story, {
                font: '28px Arial',
                color: '#FFD700',
                backgroundColor: '#292929',
                padding: { left: 20, right: 20, top: 8, bottom: 8 }
            }).setOrigin(0.5).setInteractive({ useHandCursor: true });
            btn.on('pointerover', () => btn.setColor('#FFF6A8'));
            btn.on('pointerout', () => btn.setColor('#FFD700'));
            btn.on('pointerdown', () => this.openChaptersModal(story));
            this.storyBtnsGroup.add(btn);
        });
    }

    clearStoryMenu() {
        this.storyBtnsGroup.clear(true, true);
    }

    showOptionsMenu() {
        this.clearStoryMenu();
        const x = GAME_CONFIG.width / 2;
        const y = 350;
        const group = this.add.group();

        const optionsTitle = this.add.text(x, y, 'Мова / Language:', {
            font: '32px Arial',
            color: '#FFD700'
        }).setOrigin(0.5);
        group.add(optionsTitle);

        const enBtn = this.add.text(x - 70, y + 60, 'EN', {
            font: '28px Arial',
            color: this.currentLanguage === 'en' ? '#FFD700' : '#999'
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });
        enBtn.on('pointerdown', () => {
            this.switchLanguage('en');
            enBtn.setColor('#FFD700');
            uaBtn.setColor('#999');
        });
        group.add(enBtn);

        const uaBtn = this.add.text(x + 70, y + 60, 'UA', {
            font: '28px Arial',
            color: this.currentLanguage === 'ua' ? '#FFD700' : '#999'
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });
        uaBtn.on('pointerdown', () => {
            this.switchLanguage('ua');
            uaBtn.setColor('#FFD700');
            enBtn.setColor('#999');
        });
        group.add(uaBtn);

        this.storyBtnsGroup.addMultiple(group.getChildren());
    }

    openChaptersModal(storyName) {
        this.closeChaptersModal();

        const modalBg = this.add.rectangle(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2, 700, 500, 0x181818, 0.95)
            .setStrokeStyle(4, 0xffd700);
        const closeBtn = this.add.text(GAME_CONFIG.width / 2 + 320, GAME_CONFIG.height / 2 - 220, '×', {
            font: '48px Arial',
            color: '#FFD700'
        })
            .setOrigin(0.5)
            .setInteractive({ useHandCursor: true });
        closeBtn.on('pointerdown', () => this.closeChaptersModal());

        const chapters = [
            { name: 'Глава 1', state: 'completed' },
            { name: 'Глава 2', state: 'locked' },
            { name: 'Глава 3', state: 'available' }
        ];

        this.chaptersModalGroup = this.add.group([modalBg, closeBtn]);

        chapters.forEach((ch, i) => {
            const color = ch.state === 'completed' ? '#66ff66'
                : ch.state === 'locked' ? '#cccccc'
                : '#FFD700';
            const card = this.add.text(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2 - 50 + i * 90, ch.name, {
                font: '32px Arial',
                color,
                backgroundColor: '#333',
                padding: { left: 30, right: 30, top: 14, bottom: 14 }
            }).setOrigin(0.5).setInteractive();

            // Изменяем условие, чтобы первая глава была доступна
            if (i === 0) { // Если это первая глава
                card.on('pointerdown', () => {
                    this.closeChaptersModal();
                    this.cameras.main.fadeOut(1000);
                    this.time.delayedCall(1000, () => {
                        this.scene.start('GameScene', {
                            location: 'front-house',
                            history: []
                        });
                    });
                });
            }
            this.chaptersModalGroup.add(card);
        });
    }

    closeChaptersModal() {
        if (this.chaptersModalGroup) {
            this.chaptersModalGroup.clear(true, true);
        }
    }
}

const GAME_CONFIG = { 
    width: 1920,  // Фиксированная ширина Full HD
    height: 1080, // Фиксированная высота Full HD
    idleLimit: 10,              // Лимит времени бездействия (в секундах) перед показом подсказки
    safeCode: ["4", "2", "7", "9"], // Код для открытия сейфа
    colors: {                    // Цветовые константы для различных состояний
        success: 0x00ff00,      // Зеленый цвет для успешных действий
        error: 0xff0000,        // Красный цвет для ошибок
        hint: 0xffd700,         // Золотой цвет для подсказок
        background: 0x000000    // Черный цвет для фона
    }
}

class PopupSystem {
    constructor(scene) {
        this.scene = scene;
        this.activePopup = null;
        this.overlay = null;
        this.background = null;
        this.closeButton = null;
        this._popupElements = []; // временные элементы (страницы, зоны и т.д.)
        this._escHandler = null;
        this._diaryState = {
            currentSpread: 0,
            entries: [],
            onBackground: true,
            destroy: null
        };
    }

    create(type, options) {
        this.close(); // всегда всё чистим!

        const config = {
            ITEM: { width: 700, height: 482, background: 'popup-bg-item', scale: 0.8 },
            JOURNAL: { background: 'popup-bg-journal' },
            LOCATION: { width: 400, height: 300, background: 'popup-bg-small', scale: 0.6 },
            closeButton: { scale: 0.8, offset: 40, depth: 1001 }
        }[type];
        if (!config) return;

        const {
            content,
            onClose,
            data,
            x = this.scene.cameras.main.width / 2,
            y = this.scene.cameras.main.height / 2
        } = options;

        // Overlay и closeButton создаём только один раз
        this.overlay = this.scene.add.rectangle(
            0, 0,
            this.scene.cameras.main.width,
            this.scene.cameras.main.height,
            0x000000, 0.7
        ).setOrigin(0).setDepth(998).setInteractive();

        // Фон попапа
        if (type === 'JOURNAL') {
            this.background = this.scene.add.image(x, y, config.background).setDepth(999);
        } else {
            this.background = this.scene.add.image(x, y, config.background)
                .setDisplaySize(config.width, config.height)
                .setDepth(999);
        }

        // CloseButton всегда один, координаты переданы тобой: 1500x425!
        this.closeButton = this.createCloseButton(1500, 425, config);
        this.setupCloseHandlers(this.closeButton, onClose);

        // Overlay, background, closeButton должны быть всегда в сцене, остальные временные
        this.activePopup = [this.overlay, this.background, this.closeButton];

        // Контент
        if (type === 'JOURNAL') {
            this.createJournalSpreadContent(data, x, y, config);
        } else {
            this._popupElements.push(...this.createContent(type, content, data, x, y, config));
        }
    }

    createContent(type, content, data, x, y, config) {
        switch(type) {
            case 'ITEM': return [this.createItemContent(content, x, y, config)];
            case 'JOURNAL': return this.createJournalContent(data, x, y, config);
            case 'LOCATION': return [this.createLocationContent(content, x, y, config)];
            default: return [];
        }
    }

    createItemContent(itemKey, x, y, config) {
        return this.scene.add.image(x, y, itemKey)
            .setScale(config.scale)
            .setDepth(1001);
    }

    createJournalSpreadContent(entries, x, y, config) {
        // Все временные элементы (страницы, зоны, тексты) храним в массиве и destroy при каждом renderPages!
        const shiftY = -7, centerX = x, centerY = y, dx = 295;
        const pageWidth = 610, pageHeight = 800;
        const textStyle = { font: '20px serif', color: '#432', wordWrap: { width: 500 } };
        const pageNumberStyle = { font: '14px serif', color: '#000', align: 'center' };
        const entriesCount = Array.isArray(entries) ? entries.length : 0;
        this._diaryState.entries = entries;
        const filledSpreads = Math.ceil(entriesCount / 2);

        // Состояния
        if (entriesCount === 0) {
            this._diaryState.onBackground = true;
            this._diaryState.currentSpread = 0;
        } else {
            this._diaryState.onBackground = false;
            this._diaryState.currentSpread = filledSpreads - 1;
        }

        // Обновление страниц: всегда destroy старые элементы!
        const renderPages = () => {
            this._popupElements.forEach(e => { try { e.destroy(); } catch{} });
            this._popupElements = [];

            // ======= Фон дневника =======
            if (this._diaryState.onBackground) {
                const rightZone = this.scene.add.zone(centerX + dx, centerY + shiftY, pageWidth, pageHeight)
                    .setOrigin(0.5).setInteractive().setDepth(1050)
                    .on('pointerdown', () => {
                        if (entriesCount === 0) {
                            this._diaryState.onBackground = false;
                            renderPages();
                        } else {
                            this._diaryState.onBackground = false;
                            this._diaryState.currentSpread = filledSpreads - 1;
                            renderPages();
                        }
                    });
                this._popupElements.push(rightZone);
                return;
            }

            // ======= Разворот страницы =======
            const leftPage = this.scene.add.image(centerX - dx, centerY + shiftY, 'page')
                .setDisplaySize(pageWidth, pageHeight).setDepth(1001);
            const rightPage = this.scene.add.image(centerX + dx, centerY + shiftY, 'page')
                .setDisplaySize(pageWidth, pageHeight).setScale(-1, 1).setDepth(1001);
            const leftText = this.scene.add.text(centerX - dx, centerY + shiftY, '', textStyle).setOrigin(0.5).setDepth(1002);
            const rightText = this.scene.add.text(centerX + dx, centerY + shiftY, '', textStyle).setOrigin(0.5).setDepth(1002);
            const pageY = centerY + shiftY + pageHeight / 2 - 25;
            const leftPageNum = this.scene.add.text(centerX - dx, pageY, '', pageNumberStyle).setOrigin(0.5, 1).setDepth(1051);
            const rightPageNum = this.scene.add.text(centerX + dx, pageY, '', pageNumberStyle).setOrigin(0.5, 1).setDepth(1051);

            // Навигация — левая страница (назад)
            const leftZone = this.scene.add.zone(centerX - dx, centerY + shiftY, pageWidth, pageHeight)
                .setOrigin(0.5).setInteractive().setDepth(1050)
                .on('pointerdown', () => {
                    if (entriesCount === 0) {
                        this._diaryState.onBackground = true;
                        renderPages();
                        return;
                    }
                    if (this._diaryState.currentSpread === 0) {
                        this._diaryState.onBackground = true;
                        renderPages();
                        return;
                    }
                    if (this._diaryState.currentSpread > 0) {
                        this._diaryState.currentSpread -= 1;
                        updatePages();
                    }
                });

            // Навигация — правая страница (вперёд)
            const rightZone = this.scene.add.zone(centerX + dx, centerY + shiftY, pageWidth, pageHeight)
                .setOrigin(0.5).setInteractive({ cursor: 'pointer' }).setDepth(1050)
                .on('pointerdown', () => {
                    if (entriesCount === 0) {
                        this._shake(rightPage, centerX + dx, 5);
                        return;
                    }
                    if (this._diaryState.currentSpread === filledSpreads) {
                        this._shake(rightPage, centerX + dx, 5);
                        return;
                    }
                    if (this._diaryState.currentSpread < filledSpreads) {
                        this._diaryState.currentSpread += 1;
                        updatePages();
                        return;
                    }
                });

            // Заполняем текст/номера
            const updatePages = () => {
                const spread = this._diaryState.currentSpread;
                const idx = spread * 2;
                leftText.setText(entries[idx] ? entries[idx] : '');
                leftPageNum.setText(entries[idx] ? (idx + 1).toString() : '');
                rightText.setText(entries[idx + 1] ? entries[idx + 1] : '');
                rightPageNum.setText(entries[idx + 1] ? (idx + 2).toString() : '');
                rightPage.x = x + dx;
                rightPage.angle = 0;
            };

            updatePages();

            this._popupElements.push(
                leftPage, rightPage, leftText, rightText, leftPageNum, rightPageNum, leftZone, rightZone
            );
        };

        // ESC для закрытия
        this._escHandler = this.scene.input.keyboard.on('keydown-ESC', () => this.close());

        // destroy всех временных элементов + esc
        this._diaryState.destroy = () => {
            this._popupElements.forEach(e => { try { e.destroy(); } catch{} });
            this._popupElements = [];
            if (this._escHandler) this._escHandler.removeListener('keydown-ESC');
        };

        renderPages();
    }

    _shake(target, originalX, amplitude = 10) {
        if (!target) return;
        target.x = originalX;
        this.scene.tweens.add({
            targets: target,
            x: originalX + amplitude,
            duration: 40,
            yoyo: true,
            repeat: 1,
            onComplete: () => { target.x = originalX; }
        });
    }

    createJournalContent(entries, x, y, config) {
        const contentGroup = [];
        const startY = y - (600 / 2) + 100;
        contentGroup.push(
            this.scene.add.text(x, startY - 50, 'ДНЕВНИК', {
                fontSize: '32px',
                fill: '#ffd700',
                fontStyle: 'bold'
            }).setOrigin(0.5).setDepth(1002)
        );
        entries.forEach((entry, index) => {
            contentGroup.push(
                this.scene.add.text(
                    x - (800 / 2) + 50,
                    startY + (index * 40),
                    entry,
                    {
                        fontSize: '18px',
                        fill: '#ffffff',
                        wordWrap: { width: 800 - 100 }
                    }
                ).setDepth(1002)
            );
        });
        return contentGroup;
    }

    createLocationContent(contentKey, x, y, config) {
        return this.scene.add.image(x, y, contentKey)
            .setScale(config.scale)
            .setDepth(1002);
    }

    // Кнопка close по твоим координатам (1500, 425)
    createCloseButton(x, y, config) {
        const btn = this.scene.add.sprite(
            1675, 525,
            'close'
        ).setScale(config.closeButton?.scale || 0.8)
         .setDepth(config.closeButton?.depth || 1002)
         .setInteractive();
        return btn;
    }

    setupCloseHandlers(closeButton, onClose) {
        if (!closeButton) return;
        closeButton.removeAllListeners && closeButton.removeAllListeners();
        closeButton.on('pointerover', () => closeButton.setTint(0xcccccc));
        closeButton.on('pointerout', () => {
            closeButton.clearTint();
            closeButton.setScale(0.8);
        });
        closeButton.on('pointerdown', () => {
            closeButton.setScale(0.7);
            closeButton.setTint(0x999999);
        });
        closeButton.on('pointerup', () => this.close(onClose));
    }

    close(onClose = null) {
        // Уничтожаем временные popup элементы (страницы, зоны, тексты)
        if (this._popupElements && this._popupElements.length) {
            this._popupElements.forEach(e => { try { e.destroy && e.destroy(); } catch{} });
            this._popupElements = [];
        }
        // Чистим esc
        if (this._diaryState && typeof this._diaryState.destroy === 'function') {
            this._diaryState.destroy();
            this._diaryState.destroy = null;
        }
        // Удаляем closeButton
        if (this.closeButton) {
            this.closeButton.removeAllListeners && this.closeButton.removeAllListeners();
            this.closeButton.destroy && this.closeButton.destroy();
            this.closeButton = null;
        }
        // Удаляем overlay
        if (this.overlay) {
            this.overlay.destroy && this.overlay.destroy();
            this.overlay = null;
        }
        // Удаляем background
        if (this.background) {
            this.background.destroy && this.background.destroy();
            this.background = null;
        }
        this.activePopup = null;
        this._diaryState = {
            currentSpread: 0,
            entries: [],
            onBackground: true,
            destroy: null
        };
        if (onClose) onClose();
    }
}

// Инициализация уведомлений
function requestNotificationPermission() {
    if (window.Notification && Notification.permission !== "granted") {
        Notification.requestPermission();
    }
}

// Вызываем функцию при загрузке страницы
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', requestNotificationPermission);
} else {
    requestNotificationPermission();
}

// Добавляем обработчик клавиши F для переключения полноэкранного режима
document.addEventListener('keydown', function(e) {
    if (e.key === 'f' || e.key === 'F') {
        if (!document.fullscreenElement) {
            // Если сейчас НЕ в полноэкранном режиме - включаем его
            document.documentElement.requestFullscreen();
        } else {
            // Если сейчас В полноэкранном режиме - выключаем его
            document.exitFullscreen();
        }
    }
});

const locationMap = { 
    //'new-location': {
    //    name: 'Новая Локация',
    //    image: 'new-location',
    //    neighbors: ['hall'],
    //    transitions: {
    //        'hall': {
    //            points: [
    //                { x: 300, y: 300 },
    //                { x: 400, y: 300 },
    //                { x: 400, y: 400 },
    //                { x: 300, y: 400 }
    //            ]
    //        }
    //    }
    //}

    'front-house': { 
        name: 'Фасад дома', 
        image: 'front-house', 
        neighbors: ['hall'],
        transitions: {
            'hall': {
                // Массив из 4 точек, определяющих форму зоны
                points: [
                    { x: 925, y: 755 }, // верхняя левая точка
                    { x: 985, y: 755 }, // верхняя правая точка
                    { x: 985, y: 865 }, // нижняя правая точка
                    { x: 925, y: 865 }  // нижняя левая точка
                ]
            }
        }
    },
    'hall': { 
        name: 'Холл', 
        image: 'hall', 
        neighbors: ['front-house', 'leftroom', 'rightroom'],
        transitions: {
            'front-house': {
                points: [
                    { x: 635, y: 1025 },
                    { x: 1355, y: 1025 },
                    { x: 1355, y: 1075 },
                    { x: 635, y: 1075 }
                ]
            },
            'leftroom': {
                points: [
                    { x: 205, y: 360 },
                    { x: 360, y: 415 },
                    { x: 360, y: 970 },
                    { x: 205, y: 1000 }
                ]
            },
            'rightroom': {
                points: [
                    { x: 1680, y: 370 },
                    { x: 1750, y: 290 },
                    { x: 1750, y: 1025 },
                    { x: 1680, y: 980 }
                ]
            },
            //'new-location': {
            //    points: [
            //        { x: 500, y: 500 },
            //        { x: 600, y: 500 },
            //        { x: 600, y: 600 },
            //        { x: 500, y: 600 }
            //    ]
            //}
        }
    },
    'leftroom': { 
        name: 'ЛеваяКомната', 
        image: 'leftroom', 
        neighbors: ['hall', 'wardrobe'],
        transitions: {
            'hall': {
                points: [
                    { x: 635, y: 1025 },
                    { x: 1355, y: 1025 },
                    { x: 1355, y: 1075 },
                    { x: 635, y: 1075 }
                ]
            },
            'wardrobe': {
                points: [
                    { x: 1110, y: 370 },
                    { x: 1225, y: 345 },
                    { x: 1225, y: 560 },
                    { x: 1110, y: 595 }
                ]
            }
        }
    },
    'wardrobe': { 
        name: 'Шкаф', 
        image: 'wardrobe', 
        neighbors: ['leftroom'],
        transitions: {
            'leftroom': {
                points: [
                    { x: 635, y: 1025 },
                    { x: 1355, y: 1025 },
                    { x: 1355, y: 1075 },
                    { x: 635, y: 1075 }
                ]
            }
        }
    },
    'rightroom': { 
        name: 'ПраваяКомната', 
        image: 'rightroom', 
        neighbors: ['hall', 'drawer'],
        transitions: {
            'hall': {
                points: [
                    { x: 635, y: 1025 },
                    { x: 1355, y: 1025 },
                    { x: 1355, y: 1075 },
                    { x: 635, y: 1075 }
                ]
            },
            'drawer': {
                points: [
                    { x: 1625, y: 710 },
                    { x: 1815, y: 730 },
                    { x: 1815, y: 820 },
                    { x: 1690, y: 800 },
                    { x: 1670, y: 875 },
                    { x: 1640, y: 870 },
                ]
            }
        }
    },
    'drawer': { 
        name: 'Комод', 
        image: 'drawer', 
        neighbors: ['rightroom'],
        transitions: {
            'rightroom': {
                points: [
                    { x: 635, y: 1025 },
                    { x: 1355, y: 1025 },
                    { x: 1355, y: 1075 },
                    { x: 635, y: 1075 }
                ]
            }
        }
    }
};

const locationPaths = {
    'front-house': {
        backTo: [], // начальная точка, возврата нет
        forwardTo: ['hall'] // можно идти только в дом
    },
    'hall': {
        backTo: ['front-house'], // возврат на улицу
        forwardTo: ['leftroom', 'rightroom'] // можно идти в комнату одну из двух
    },
    'leftroom': {
        backTo: ['hall'], // возврат в холл
        forwardTo: [] // дальше пути нет
    },
    'rightroom': {
        backTo: ['hall'], // возврат в холл
        forwardTo: ['drawer'] // можно перейти в комод
    },
    'drawer': {
        backTo: ['rightroom'], // возврат в правую комнату
        forwardTo: [] // дальше пути нет
    },
    'wardrobe': {
        backTo: ['leftroom'], // возврат в левую комнату
        forwardTo: [] // дальше пути нет
    },
    //'new-location?': {
    //    backTo: ['hall?'],
    //    forwardTo: [?]
    //},
};

// Утилитный класс для общих методов
class NavigationUtils {
    static createNavigationZones(scene) {
        const currentLocation = scene.location;
        const neighbors = locationMap[currentLocation].neighbors;
        const transitions = locationMap[currentLocation].transitions;

        neighbors.forEach(neighbor => {
            const zoneName = locationMap[neighbor].name;
            const transition = transitions[neighbor];
            const points = transition.points;

            // Создаем зону на основе полигона
            const navigationZone = scene.add.zone(0, 0, 1, 1)
                .setOrigin(0)
                .setInteractive(new Phaser.Geom.Polygon(points), Phaser.Geom.Polygon.Contains);

            // Рисуем видимую границу зоны (для отладки)
            const graphics = scene.add.graphics();
            graphics.lineStyle(2, 0xff0000);
            graphics.beginPath();
            graphics.moveTo(points[0].x, points[0].y);
            
            // Рисуем линии между точками
            points.forEach((point, index) => {
                const nextPoint = points[(index + 1) % points.length];
                graphics.lineTo(nextPoint.x, nextPoint.y);
            });
            
            graphics.closePath();
            graphics.strokePath();

            // Обработка кликов
            navigationZone.on('pointerdown', () => {
                scene.cameras.main.fadeOut(1000);
                scene.time.delayedCall(1000, () => {
                    scene.scene.start('GameScene', {
                        location: neighbor,
                        history: [...(scene.locationHistory || []), currentLocation]
                    });
                });
            });

            // Добавляем стрелки и текст для обратного направления
            const isBackwardDirection = locationPaths[currentLocation].backTo.includes(neighbor);

            if (isBackwardDirection) {
                // Находим центр полигона для размещения стрелки и текста
                const centerX = points.reduce((sum, point) => sum + point.x, 0) / points.length;
                const centerY = points.reduce((sum, point) => sum + point.y, 0) / points.length;

                const edgeThreshold = 100;
                const distanceToLeft = centerX;
                const distanceToRight = GAME_CONFIG.width - centerX;
                const distanceToBottom = GAME_CONFIG.height - centerY;

                const arrow = scene.add.sprite(centerX, centerY, 'arrow')
                    .setDepth(1)
                    .setScale(1);

                let angle = 0;
                let textOffsetY = -15;

                if (distanceToLeft <= edgeThreshold) {
                    angle = -90;
                } else if (distanceToRight <= edgeThreshold) {
                    angle = 90;
                } else if (distanceToBottom <= edgeThreshold) {
                    angle = 180;
                }

                arrow.setAngle(angle);

                const text = scene.add.text(centerX, centerY + textOffsetY, zoneName, {
                    fontSize: '12px',
                    fill: '#ffd700',
                    align: 'center'
                }).setOrigin(0.5);

                navigationZone
                    .on('pointerover', () => {
                        arrow.setTint(0xffff00);
                        text.setTint(0xffff00);
                    })
                    .on('pointerout', () => {
                        arrow.clearTint();
                        text.clearTint();
                    });
            }
        });
    }
}

// JournalSystem.js
// Класс системы дневника для игры на Phaser с подробными комментариями

class JournalSystem {
    constructor(scene) {
        this.scene = scene;             // Главная сцена игры (обычно GameScene)
        this.entries = [];              // Массив всех записей в дневнике
        this.uniqueEntries = new Set(); // Множество для уникальных записей (нет дублей)
        this.isOpen = false;            // Флаг: дневник открыт или закрыт
        this.createJournalButton();     // Создаём кнопку дневника при инициализации
    }

    // Создание кнопки дневника на экране
    createJournalButton() {
        const buttonX = 190;
        const buttonY = 55;
        const buttonSize = 96; // Размер кнопки, можно подогнать под UI

        // Создаём спрайт кнопки и настраиваем его интерактивность
        this.journalButton = this.scene.add.sprite(buttonX, buttonY, 'JournalButton')
            .setInteractive()
            .setDepth(100) // Поверх других элементов UI
            .setDisplaySize(buttonSize, buttonSize);

        // Наведение мыши — подсвечиваем кнопку
        this.journalButton.on('pointerover', () => {
            if (!this.journalButton.isTinted) {
                this.journalButton.setTint(0xcccccc);
            }
        });

        // Уводим мышь — возвращаем исходный цвет и размер
        this.journalButton.on('pointerout', () => {
            this.journalButton.clearTint();
            this.journalButton.setDisplaySize(buttonSize, buttonSize);
        });

        // Нажатие — уменьшаем и затемняем кнопку
        this.journalButton.on('pointerdown', () => {
            this.journalButton.setDisplaySize(buttonSize * 0.95, buttonSize * 0.95);
            this.journalButton.setTint(0x999999);
        });

        // Отпускание — возвращаем нормальный вид и открываем/закрываем дневник
        this.journalButton.on('pointerup', () => {
            this.journalButton.setDisplaySize(buttonSize, buttonSize);
            this.journalButton.clearTint();
            this.toggleJournal();
        });
    }

    // Визуальный эффект для новой записи (свечение и пульсация)
    showNewEntryEffect() {
        const glowColor = 0xFFE666; // Ярко-жёлтый для эффекта
        this.journalButton.setTint(glowColor);

        // Анимация: увеличение, затем возвращение к исходному состоянию
        this.scene.tweens.add({
            targets: this.journalButton,
            scale: { from: 1, to: 1.1 },
            alpha: { from: 1, to: 0.7, yoyo: true },
            duration: 2000,
            yoyo: true,
            ease: 'Sine.easeInOut',
            onComplete: () => {
                this.journalButton.clearTint();
                this.journalButton.setAlpha(1);
                this.journalButton.setScale(1);
            }
        });
    }

    // Добавление записи: только если такой ещё нет
    addEntry(text) {
        if (this.uniqueEntries.has(text)) {
            console.log(`Запись "${text}" уже существует, не добавляем.`);
            return;
        }
        this.entries.push(text);           // Сохраняем запись
        this.uniqueEntries.add(text);      // Отмечаем как уникальную

        // Если дневник открыт — обновить попап с записями
        if (this.isOpen && this.scene.popupSystem) {
            this.openJournal();
        }

        // Визуальный эффект на кнопке
        this.showNewEntryEffect();
    }

    // Сброс дневника (например, при рестарте игры)
    resetJournal() {
        this.entries = [];
        this.uniqueEntries.clear();
    }

    // Открыть/закрыть дневник (по клику на кнопку)
    toggleJournal() {
        if (this.isOpen) {
            this.closeJournal();
        } else {
            this.openJournal();
        }
    }

    // Открытие дневника (через popupSystem)
    openJournal() {
        if (!this.scene.popupSystem) return;

        this.scene.popupSystem.create('JOURNAL', {
            data: this.entries, // Список записей отправляем в попап
            onClose: () => {
                this.isOpen = false; // После закрытия флажок закрыт
            }
        });

        this.isOpen = true;
    }

    // Закрытие дневника (убираем попап)
    closeJournal() {
        if (this.scene.popupSystem) {
            this.scene.popupSystem.close();
        }
        this.isOpen = false;
    }
}

class InventorySystem {
    constructor(scene) {
        this.scene = scene;
        this.slots = [];       // Массив слотов инвентаря
        this.items = [];       // Массив предметов (можно использовать для логики)

        // Настройки инвентаря
        this.config = {
            slots: 5,
            slotSize: 50,
            padding: 10,
            startX: 10, // Отступ слева
            // Центрирование по высоте экрана
            startY: (GAME_CONFIG.height - ((50 + 10) * 5 - 10)) / 2,
            borderColor: 0x888888
        };

        this.createInventoryUI(); // Создаём UI инвентаря при инициализации
    }

    // Добавление предмета в инвентарь
    addItem(key, name) {
        // Находим первый пустой слот
        const emptySlot = this.slots.find(slot => !slot.item);
        if (!emptySlot) return false;

        // Создаём спрайт предмета
        const item = this.scene.add.sprite(
            emptySlot.center.x,
            emptySlot.center.y,
            key
        );

        // Масштабируем предмет так, чтобы он поместился в слот
        const scale = Math.min(
            175 * (100 / 249) / item.width,
            160 * (500 / 1093) / item.height
        ) * 0.9;
        item.setScale(scale);

        // Предмет выше фона
        item.setDepth(10);

        // Интерфейс перетаскивания
        item.setInteractive({ draggable: true });
        this.scene.input.setDraggable(item);

        // Открытие попапа по клику на предмет
        item.on('pointerdown', (pointer, localX, localY, event) => {
            event.stopPropagation();
            this.showItemPopup(key, name);
        });

        item.on('dragstart', () => {
            item.setTint(0x999999);
            item.setDepth(20); // Выше других предметов при перетаскивании
        });

        item.on('dragend', (pointer) => {
            item.clearTint();
            item.setDepth(10);
            item.x = emptySlot.center.x;
            item.y = emptySlot.center.y;
        });

        // Сохраняем предмет в слот
        emptySlot.item = {
            sprite: item,
            name: name,
            key: key
        };

        // Добавляем запись в дневник через GameScene!
        const gameScene = this.scene.scene.get('GameScene');
        if (gameScene && gameScene.journalSystem) {
            gameScene.journalSystem.addEntry(`Найден предмет: ${name}`);
        }

        return true;
    }

    // Показываем попап с информацией о предмете
    showItemPopup(key, name) {
        const gameScene = this.scene.scene.get('GameScene');
        if (!gameScene || !gameScene.popupSystem) return;

        gameScene.popupSystem.create('ITEM', {
            content: key,
            onClose: () => {
                console.log(`Закрыт попап предмета: ${name}`);
            }
        });
    }

    // Анимация передачи предмета персонажу
    giveItemToCharacter(item, slot) {
        this.scene.tweens.add({
            targets: item,
            alpha: 0,
            scale: 0,
            duration: 300,
            ease: 'Power2',
            onComplete: () => {
                item.destroy();
                slot.item = null;
                if (this.scene.onItemGiven) {
                    this.scene.onItemGiven(item.name);
                }
            }
        });
    }

    // Удаление предмета по ключу
    removeItem(key) {
        const slot = this.slots.find(slot => slot.item?.key === key);
        if (!slot) return false;

        if (slot.item.sprite.tooltip) {
            slot.item.sprite.tooltip.destroy();
        }
        slot.item.sprite.destroy();
        slot.item = null;
        return true;
    }
}

let globalEnergySystem = null;

class EnergySystem {
    constructor(scene) {
        this.scene = scene;
        this.INITIAL_ENERGY = 200;
        this.MAX_ENERGY = 200;
        this.REGENERATION_RATE = 1;
        this.REGENERATION_INTERVAL = 10000;
        this.COSTS = {
            SEARCH_ITEM: 5,
            MISS_PENALTY: 10,
            USE_HINT: 10,
            PUZZLE: 20,
            GIVE_ITEM: 5
        };
        this.currentEnergy = this.loadEnergy();
        this.lastUpdateTime = this.loadLastUpdateTime();
        this.updateEnergy();
        this.createEnergyUI();
    }

    updateEnergy() {
        const now = Date.now();
        const timePassed = now - this.lastUpdateTime;
        const energyToAdd = Math.floor(timePassed / this.REGENERATION_INTERVAL);
        if (energyToAdd > 0) {
            this.addEnergy(energyToAdd);
            this.lastUpdateTime = now - (timePassed % this.REGENERATION_INTERVAL);
            this.saveLastUpdateTime();
        }
    }

    createEnergyUI() {
        const energyIconSize = 96;
        const energyIconX = 1730;
        const energyIconY = 55;
        this.energyIcon = this.scene.add.sprite(energyIconX, energyIconY, 'energy-icon')
            .setInteractive()
            .setDepth(100)
            .setDisplaySize(energyIconSize, energyIconSize);
        this.energyIcon.on('pointerover', () => {
            if (!this.energyIcon.isTinted) {
                this.energyIcon.setTint(0xcccccc);
            }
        });
        this.energyIcon.on('pointerout', () => {
            this.energyIcon.clearTint();
        });
        this.energyIcon.on('pointerdown', () => {
            this.energyIcon.setDisplaySize(energyIconSize * 0.95, energyIconSize * 0.95);
            this.energyIcon.setTint(0x999999);
        });
        this.energyIcon.on('pointerup', () => {
            this.energyIcon.setDisplaySize(energyIconSize, energyIconSize);
            this.energyIcon.clearTint();
            this.showEnergyBar();
        });
        this.energyIcon.on('pointerout', () => {
            this.energyIcon.setDisplaySize(energyIconSize, energyIconSize);
            this.energyIcon.clearTint();
        });
        this.energyBar = this.scene.add.graphics().setDepth(100);
        this.energyText = this.scene.add.text(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height - 110 + 15,
            '',
            {
                fontSize: '18px',
                fill: '#ffffff',
                fontWeight: 'bold'
            }
        ).setDepth(101).setOrigin(0.5);
        this.adButton = this.scene.add.text(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height - 70,
            'Получить энергию за просмотр рекламы',
            {
                fontSize: '16px',
                fill: '#00ff00',
                backgroundColor: '#333333',
                padding: { x: 15, y: 10 }
            }
        )
            .setInteractive()
            .setDepth(100)
            .setOrigin(0.5)
            .setVisible(false)
            .on('pointerdown', () => this.showRewardedAd())
            .on('pointerover', () => this.adButton.setStyle({ fill: '#ffffff' }))
            .on('pointerout', () => this.adButton.setStyle({ fill: '#00ff00' }));
        this.hideEnergyBar();
    }

    showEnergyBar() {
        if (this.currentEnergy < this.MAX_ENERGY) {
            const now = Date.now();
            const timePassed = now - this.lastUpdateTime;
            const energyToAdd = Math.floor(timePassed / this.REGENERATION_INTERVAL) * this.REGENERATION_RATE;
            if (energyToAdd > 0) {
                this.currentEnergy = Math.min(this.MAX_ENERGY, this.currentEnergy + energyToAdd);
                this.lastUpdateTime = now - (timePassed % this.REGENERATION_INTERVAL);
                this.saveEnergy();
                this.saveLastUpdateTime();
            }
        }
        if (this.energyBar) {
            this.energyBar.visible = true;
            this.updateEnergyBar();
        }
        if (this.energyText) {
            this.energyText.visible = true;
        }
        if (this.adButton) {
            this.adButton.visible = true;
        }
        if (this.hideTimer) {
            this.scene.time.removeEvent(this.hideTimer);
        }
        this.hideTimer = this.scene.time.delayedCall(5000, () => {
            this.hideEnergyBar();
        }, [], this);
    }

    hideEnergyBar() {
        if (this.energyBar) this.energyBar.visible = false;
        if (this.energyText) this.energyText.visible = false;
        if (this.adButton) this.adButton.visible = false;
        if (this.hideTimer) {
            this.scene.time.removeEvent(this.hideTimer);
            this.hideTimer = null;
        }
    }

    updateEnergyBar() {
        if (!this.energyBar) return;
        this.energyBar.clear();
        const barWidth = 300, barHeight = 30;
        const barX = GAME_CONFIG.width / 2 - barWidth / 2;
        const barY = GAME_CONFIG.height - 110;
        this.energyBar.fillStyle(0x333333, 0.8);
        this.energyBar.fillRoundedRect(barX, barY, barWidth, barHeight, 8);
        const fillWidth = (this.currentEnergy / this.MAX_ENERGY) * barWidth;
        this.energyBar.fillStyle(0x00ff00);
        this.energyBar.fillRoundedRect(barX, barY, Math.min(fillWidth, barWidth), barHeight, 8);
        this.energyBar.lineStyle(2, 0xffffff, 0.3);
        this.energyBar.strokeRoundedRect(barX, barY, barWidth, barHeight, 8);
        this.energyText.setPosition(GAME_CONFIG.width / 2, barY + barHeight / 2);
        this.energyText.setText(`${this.currentEnergy}/${this.MAX_ENERGY}`);
    }

    addEnergy(amount) {
        const oldEnergy = this.currentEnergy;
        this.currentEnergy = Math.min(this.MAX_ENERGY, this.currentEnergy + amount);
        if (oldEnergy !== this.currentEnergy) {
            this.saveEnergy();
            this.updateEnergyBar();
            if (this.currentEnergy >= this.COSTS.SEARCH_ITEM) {
                this.resetEnergyWarning();
            }
            if (this.currentEnergy >= this.MAX_ENERGY && oldEnergy < this.MAX_ENERGY) {
                this.sendFullEnergyNotification();
            }
        }
    }

    showLowEnergyWarning() {
        if (this.currentEnergy < this.COSTS.SEARCH_ITEM && this.energyIcon) {
            this.energyIcon.setTint(0xff0000);
            if (!this.blinkTween) {
                this.blinkTween = this.scene.tweens.add({
                    targets: this.energyIcon,
                    alpha: { from: 1, to: 0.5 },
                    duration: 500,
                    yoyo: true,
                    repeat: -1
                });
            }
        }
    }

    resetEnergyWarning() {
        if (this.energyIcon) {
            this.energyIcon.clearTint();
            if (this.blinkTween) {
                this.blinkTween.stop();
                this.blinkTween.remove();
                this.blinkTween = null;
            }
            this.energyIcon.setAlpha(1);
        }
    }

    sendFullEnergyNotification() {
        if ("Notification" in window && Notification.permission === "granted") {
            new Notification("Энергия восстановлена!", {
                body: "Ваша энергия полностью восстановлена!",
                icon: "./UI/ApprovedUI/Energy.png"
            });
        }
    }

    saveEnergy() {
        localStorage.setItem('energy', this.currentEnergy.toString());
    }
    loadEnergy() {
        const saved = localStorage.getItem('energy');
        return saved ? parseInt(saved) : this.INITIAL_ENERGY;
    }
    saveLastUpdateTime() {
        localStorage.setItem('energyLastUpdate', this.lastUpdateTime.toString());
    }
    loadLastUpdateTime() {
        const saved = localStorage.getItem('energyLastUpdate');
        return saved ? parseInt(saved) : Date.now();
    }
    showRewardedAd() {
        const rewardAmount = 50;
        this.addEnergy(rewardAmount);
        const rewardText = this.scene.add.text(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2,
            `+${rewardAmount} энергии!`,
            { fontSize: '32px', fill: '#00ff00', backgroundColor: '#000000', padding: { x: 20, y: 10 } }
        ).setOrigin(0.5).setDepth(200);
        this.scene.time.delayedCall(2000, () => {
            rewardText.destroy();
        });
    }

    hasEnough(amount) {
        this.updateEnergy();
        return this.currentEnergy >= amount;
    }

    spend(amount, action) {
        this.updateEnergy();
        if (this.currentEnergy < amount) {
            this.showNotEnoughEnergy();
            return false;
        }
        this.currentEnergy = Math.max(0, this.currentEnergy - amount);
        this.saveEnergy();
        this.updateEnergyBar();
        if (this.currentEnergy < 20) {
            this.showLowEnergyWarning();
        }
        return true;
    }

    startRegeneration() {
        const now = Date.now();
        const timePassed = now - this.lastUpdateTime;
        const energyToAdd = Math.floor((timePassed / this.REGENERATION_INTERVAL) * this.REGENERATION_RATE);
        this.addEnergy(energyToAdd);
        this.regenerationTimer = this.scene.time.addEvent({
            delay: this.REGENERATION_INTERVAL,
            callback: () => {
                if (this.currentEnergy < this.MAX_ENERGY) {
                    this.addEnergy(this.REGENERATION_RATE);
                    this.lastUpdateTime = Date.now();
                    this.saveLastUpdateTime();
                }
            },
            callbackScope: this,
            repeat: -1,
            loop: true
        });
    }

    handleMiss() {
        this.missCount++;
        if (this.missCount >= 5) {
            this.spend(this.COSTS.MISS_PENALTY, 'miss');
            this.missCount = 0;
            this.showFrozenScreen();
        }
    }

    showFrozenScreen() {
        const overlay = this.scene.add.rectangle(
            0, 0,
            this.scene.game.config.width,
            this.scene.game.config.height,
            0xffffff, 0.5
        ).setOrigin(0);

        this.scene.time.delayedCall(1000, () => {
            overlay.destroy();
        });
    }

    showNotEnoughEnergy() {
        const text = this.scene.add.text(
            this.scene.game.config.width / 2,
            this.scene.game.config.height / 2,
            'Недостаточно энергии!',
            {
                fontSize: '24px',
                fill: '#ff0000',
                backgroundColor: '#000000',
                padding: { x: 20, y: 10 }
            }
        ).setOrigin(0.5);

        this.scene.time.delayedCall(2000, () => {
            text.destroy();
        });
    }
}

class GameScene extends Phaser.Scene { 
    constructor() {
        super({ key: 'GameScene' });

        // Инициализация игровых систем и переменных
        this.currentLocation = null;
        this.journalSystem = null;
        this.popupSystem = null;
        this.energySystem = null;
        this.hintSystem = null;

        this.isTransitioning = false;
        this.canInteract = true;

        this.idleTimer = 0;
        this.lastInteractionTime = 0;
        this.lastHintTime = 0;
        this.hintCooldown = 30000;

        this.transitionZones = [];
        this.interactiveObjects = [];
        this.highlightedObject = null;

        this.state = {
            visitedLocations: new Set(),
            collectedItems: new Set(),
            solvedPuzzles: new Set(),
            triggers: new Map(),
            selectedDigits: ["0", "0", "0", "0"],
            foundObjects: [],
            remainingObjects: [],
            ringFound: false,
            inventory: []
        };

        // Инвентарь (новый/правильный вариант: фон масштабируется, слоты - как в старой сцене)
        this.inventory = {
            items: [],
            slots: [],
            background: null,
            toggleButton: null,
            isVisible: false,
            config: {
                originalBgWidth: 249,
                originalBgHeight: 1093,
                bgWidth: 100,     // желаемая ширина на экране
                bgHeight: 440,    // желаемая высота на экране
                bgOffsetX: 30,
                bgOffsetY: 300,
                slotSize: 60,     // размер предмета в слоте (для масштабирования)
                maxSlots: 5
            }
        };

        // Прочие UI элементы
        this.itemList = null;
        this.itemTextObjects = [];
        this.textBackground = null;
        this.hintButton = null;
        this.hintButtonTween = null;
        this.codeInputGroup = null;
        this.popupGroup = null;

        // Отладка
        this.debugMode = false;
        this.debugGraphics = null;

        // Основная конфигурация
        this.config = {
            transitionDuration: 1000,
            highlightTint: 0xffffcc,
            idleTimeout: GAME_CONFIG.idleLimit * 1000,
            debugColor: 0xff0000,
            inventoryDepth: 1000
        };
    }

    initInventory() {
        this.inventory = {
            slots: [],
            items: [],
            background: null,
            toggleButton: null,
            isVisible: false,
            config: {
                originalBgWidth: 249,
                originalBgHeight: 1093,
                bgWidth: 100,   // желаемая ширина на экране
                bgHeight: 440,  // желаемая высота на экране
                bgOffsetX: 30,
                bgOffsetY: 300,
                slotSize: 60,   // размер предмета в слоте (для масштабирования)
                maxSlots: 5
            }
        };
    }

    create() {
        this.initInventory();        // сбрасываем inventory
        this.createInventoryUI();    // делаем фон и слоты
        this.restoreInventoryItems();// восстанавливаем предметы

        // Инициализация игровых систем
        this.popupSystem = new PopupSystem(this);
        this.cameras.main.fadeIn(1000);
        this.createBackground();

        // Система энергии
        if (!globalEnergySystem) {
            globalEnergySystem = new EnergySystem(this);
        } else {
            globalEnergySystem.scene = this;
            globalEnergySystem.createEnergyUI();
        }
        this.energySystem = globalEnergySystem;

        // Система дневника
        this.journalSystem = new JournalSystem(this);

        // Создание UI
        this.menuButton = this.createMenuButton();
        this.createHintButton();

        // Обработчик промахов
        this.input.on('pointerdown', (pointer) => {
            if (!pointer.gameObject) {
                this.energySystem.handleMiss();
            }
        });

        // Локация
        if (this.location === 'leftroom') {
            this.createObjects();
            this.createUI();
        }

        // Навигация
        NavigationUtils.createNavigationZones(this);
    }

    createInventoryUI() {
        const cfg = this.inventory.config;
        const scaleX = cfg.bgWidth / cfg.originalBgWidth;
        const scaleY = cfg.bgHeight / cfg.originalBgHeight;

        // Фон инвентаря
        this.inventory.background = this.add.image(
            cfg.bgOffsetX,
            cfg.bgOffsetY,
            'inventory-bg'
        )
        .setOrigin(0, 0)
        .setDisplaySize(cfg.bgWidth, cfg.bgHeight)
        .setScrollFactor(0)
        .setDepth(this.config.inventoryDepth)
        .setVisible(true)
        .setInteractive();

        // Центры слотов (масштабируются!)
        const slotPositions = [
            { x: 130, y: 190 },
            { x: 130, y: 365 },
            { x: 130, y: 540 },
            { x: 130, y: 720 },
            { x: 130, y: 890 }
        ];

        this.inventory.slots = slotPositions.map((pos, i) => ({
            x: cfg.bgOffsetX + pos.x * scaleX,
            y: cfg.bgOffsetY + pos.y * scaleY,
            item: null,
            index: i
        }));
    }

    restoreInventoryItems() {
        // Удалить старые спрайты
        this.inventory.items.forEach(sprite => { if (sprite) sprite.destroy(); });
        this.inventory.items = [];
        this.inventory.slots.forEach(slot => { slot.item = null; });

        // Восстановить предметы
        this.state.inventory.forEach(({ key, name }) => {
            this.addToInventory(key, name, true); // режим восстановления
        });
    }

    addToInventory(key, name, restoring = false) {
        if (this.state.inventory.some(item => item.key === key) && !restoring) return false;

        const freeSlot = this.inventory.slots.find(slot => !slot.item);
        if (!freeSlot) return false;

        const itemSprite = this.add.sprite(freeSlot.x, freeSlot.y, key)
            .setOrigin(0.5)
            .setScrollFactor(0)
            .setDepth(this.config.inventoryDepth + 1)
            .setVisible(true)
            .setInteractive();

        const desiredSize = this.inventory.config.slotSize || 64;
        const scale = Math.min(
            desiredSize / itemSprite.width,
            desiredSize / itemSprite.height
        );
        itemSprite.setScale(scale);

        itemSprite.on('pointerdown', () => {
            this.showItemPopup(key, name);
        });

        freeSlot.item = itemSprite;
        this.inventory.items.push(itemSprite);

        if (!restoring) {
            this.state.inventory.push({ key, name });
            if (this.journalSystem) {
                this.journalSystem.addEntry(`Найден предмет: ${name}`);
            }
        }
        return true;
    }

    showItemPopup(key, name) {
        if (!this.popupSystem) return;
        this.popupSystem.create('ITEM', {
            content: key,
            onClose: () => {
                console.log(`Закрыт попап предмета: ${name}`);
            }
        });
    }

    showLocationPopup(objectKey, x, y) {
        if (!this.popupSystem) return;
    
        this.popupSystem.create('LOCATION', {
            content: objectKey,
            x: GAME_CONFIG.width / 2,  // было x
            y: GAME_CONFIG.height / 2, // было y
            onClose: () => {
                console.log(`Закрыт попап локации: ${objectKey}`);
            }
        });
    }

    updateHintButtonState() {
        // Проверяем, существует ли кнопка подсказки
        if (this.hintButton) {
            // Проверяем, достаточно ли энергии для использования подсказки (USE_HINT = 10)
            if (this.energySystem.hasEnough(this.energySystem.COSTS.USE_HINT)) {
                // Если энергии достаточно - кнопка активна
                this.hintButton.clearTint();
                this.hintButton.setInteractive();
            } else {
                // Если энергии недостаточно (9 и меньше) - кнопка неактивна
                this.hintButton.setTint(0x666666); // Серый цвет
                this.hintButton.disableInteractive(); // Отключаем интерактивность
            }
        }
    }

    handleObjectClick(object) {
        if (!object || object.isAnimating) {
            return;
        }
    
        // Проверяем достаточно ли энергии для действия
        if (!this.energySystem.spend(this.energySystem.COSTS.SEARCH_ITEM, 'search')) {
            return;
        }
    
        object.isAnimating = true;
        
        // Проверяем, является ли объект маленьким попапом
        if (object.isSmallPopup) {
            this.showLocationPopup(object.popupKey, object.x, object.y);
            object.isAnimating = false;
            return;
        }
    
        // Остальной код handleObjectClick без изменений
        this.handleDependentObjects(object.name);
    
        switch (object.name) {
            case 'Сейф':
                object.isAnimating = false;
                this.openSafe();
                break;
            case 'Скомканный лист':
                this.showPopup(object, 'list2', true);
                break;
            case 'Кольцо':
                this.addToInventory('object8', 'Кольцо');
                this.animateObjectDisappearance(object);
                break;
            default:
                this.animateObjectDisappearance(object);
        }
    }

    useHint() {
        // Проверяем, достаточно ли энергии
        if (!this.energySystem.spend(this.energySystem.COSTS.USE_HINT, 'hint')) {
            return;
        }
    
        const currentTime = Date.now();
        
        // Проверяем, прошло ли 30 секунд с последнего использования
        if (currentTime - this.lastHintTime < this.hintCooldown) {
            // Если не прошло 30 секунд, выходим
            return;
        }
    
        // Обновляем время последней подсказки
        this.lastHintTime = currentTime;
    
        // Показываем подсказку в зависимости от локации
        if (this.location === 'leftroom' && this.state.remainingObjects.length > 0) {
            this.showObjectHint();
        } else {
            this.showNavigationHint();
        }
    }

    init(data) {
        // Объединенная инициализация из обоих классов
        this.location = data.location || 'front-house';
        this.locationHistory = data.history || [];
        
        // Восстанавливаем состояние
        if (data.gameState) {
            this.state = {
                ...this.state,
                foundObjects: data.gameState.foundObjects || [],
                remainingObjects: data.gameState.remainingObjects || [],
                ringFound: data.gameState.ringFound || false,
                inventory: data.gameState.inventory || []
            };
        }
    }

    createBackground() {
        const backgroundKey = locationMap[this.location].image;
        if (this.textures.exists(backgroundKey)) {
            this.add.image(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2, backgroundKey)
                .setDisplaySize(1920, 1080);
        } else {
            console.error(`Ошибка: Изображение для ${backgroundKey} не загружено`);
        }
    }

    createObjects() {
        const objects = [
            { key: 'object1', x: 502, y: 206, name: 'Тарелка' },
            { key: 'object2', x: 175, y: 306, name: 'Череп-свеча' },
            { key: 'object3', x: 354, y: 106, name: 'Картина' },
            { key: 'object4', x: 451, y: 251, name: 'Сервиз' },
            { key: 'object5', x: 485, y: 370, name: 'Скомканный лист' },
            { key: 'object7', x: 117, y: 407, name: 'Лист' },
            { 
                key: 'object8', 
                x: 353, 
                y: 246, 
                name: 'Кольцо',
                hidden: true,
                dependsOn: 'Сейф',
                available: false
            }
        ];
    
        // Инициализируем remainingObjects, включая скрытые предметы
        if (!this.state.remainingObjects || this.state.remainingObjects.length === 0) {
            this.state.remainingObjects = objects;
        }
    
        // Создаем только видимые объекты, которые еще не были найдены
        this.state.remainingObjects.forEach(obj => {
            // Проверяем, не был ли предмет уже найден и не является ли он скрытым
            if (!obj.hidden && !this.state.foundObjects.includes(obj.name)) {
                this.createGameObject(obj);
            }
        });
    
        // Создаем сейф, только если кольцо еще не найдено
        if (!this.state.ringFound) {
            this.createSafe();
        }
    }

    createGameObject(objData) { // Создание отдельного игрового объекта
        const object = this.add.sprite(objData.x, objData.y, objData.key)
            .setInteractive()
            .setName(objData.name)
            .on('pointerdown', () => this.handleObjectClick(object));

        return object;
    }

    createSafe() { // Создание сейфа
        this.createGameObject({
            key: 'object6',
            x: 353,
            y: 246,
            name: 'Сейф'
        });
    }

    createUI() {
        // Отступ от верхнего края
        const padding = 5;
        
        // 1. Создаем фон сначала
        this.textBackground = this.add.rectangle(
            GAME_CONFIG.width / 2,    // центрируем по горизонтали
            padding + 10,             // небольшой отступ сверху
            320,                      // ширина фона
            200,                      // начальная высота фона
            0x000000,                // черный цвет
            0.8                      // прозрачность 80%
        ).setOrigin(0.5, 0);         // привязка к верхнему краю
        this.textBackground.setDepth(-1); // фон под текстом
    
        // 2. Создаем текстовый контейнер
        this.itemList = this.add.text(
            GAME_CONFIG.width / 2,    // центрируем по горизонтали
            padding + 20,             // отступ от верха + 20 пикселей для читаемости
            '',                       // пустой текст изначально
            {
                fontSize: '13px',
                fill: '#ffffff',
                padding: { x: 15, y: 5 },
                align: 'left',        // выравнивание по левому краю
                fixedWidth: 300,      // фиксированная ширина
                fixedHeight: 180,     // фиксированная высота
                backgroundColor: null  // убираем фон у текста
            }
        ).setOrigin(0.5, 0);         // центрирование по горизонтали
    
        // Разделяем предметы на две колонки
        const itemsPerColumn = Math.ceil(this.state.remainingObjects.length / 2);
        const leftColumnItems = this.state.remainingObjects.slice(0, itemsPerColumn);
        const rightColumnItems = this.state.remainingObjects.slice(itemsPerColumn);
    
        // Создаем массивы для обеих колонок с учетом цвета
        const leftColumn = leftColumnItems.map(obj => {
            const color = (obj.hidden && !obj.available) ? '#ff0000' : '#ffffff';
            return { 
                text: obj.name, 
                color: color 
            };
        });
        
        const rightColumn = rightColumnItems.map(obj => {
            const color = (obj.hidden && !obj.available) ? '#ff0000' : '#ffffff';
            return { 
                text: obj.name, 
                color: color 
            };
        });

        // Находим максимальную длину имени предмета для выравнивания колонок
        const maxLength = Math.max(
            ...leftColumn.map(item => item.text.length),
            ...rightColumn.map(item => item.text.length)
        );
    
        // Формируем текст для списка
        let formattedText = '';
        leftColumn.forEach((leftItem, index) => {
            const rightItem = rightColumn[index] || { text: '', color: '#ffffff' };
            formattedText += leftItem.text.padEnd(maxLength + 5);
            if (rightItem.text) {
                formattedText += rightItem.text;
            }
            if (index < leftColumn.length - 1) {
                formattedText += '\n';
            }
        });
    
        // Устанавливаем текст в контейнер
        this.itemList.setText(formattedText);
    
        // Обновляем список предметов
        this.updateItemList();
        
        return this.itemList;
    }

    createHintButton() {
        const buttonSize = 128;

        // Простые фиксированные координаты для кнопки подсказки
        const buttonX = 1845; // Позиция по X (лево-право)
        const buttonY = 70; // Позиция по Y (верх-низ)

        // Создаем основную кнопку
        this.hintButton = this.add.sprite(
            buttonX,
            buttonY,
            'hint-button'
        )
    .setInteractive() // Делаем кнопку кликабельной
    .setDisplaySize(buttonSize, buttonSize); // Устанавливаем размер кнопки
    
        // Функция для создания синхронизированной анимации пульсации
        const createPulseTween = () => {
            const pulseDuration = 700; 
    
            // Объединенная пульсация размера и цвета
            this.hintButtonTween = this.tweens.add({
                targets: this.hintButton,
                scale: { from: 0.92, to: 1.05 }, // Увеличили уменьшение с 0.98 до 0.92
                duration: pulseDuration,
                yoyo: true,
                repeat: -1,
                ease: 'Sine.easeInOut',
                onUpdate: (tween) => {
                    const progress = (tween.getValue() - 0.92) / (1.05 - 0.92); // обновили нормализацию
                    const color = Phaser.Display.Color.Interpolate.ColorWithColor(
                        Phaser.Display.Color.ValueToColor(0xFFFFFF),  // белый
                        Phaser.Display.Color.ValueToColor(0xFFD700),  // золотой
                        100,
                        progress * 100
                    );
                    this.hintButton.setTint(Phaser.Display.Color.GetColor(color.r, color.g, color.b));
                }
            });
        };
    
        // Обработчик клика с анимацией
        this.hintButton.on('pointerdown', () => {
            const currentTime = Date.now();
            if (currentTime - this.lastHintTime >= this.hintCooldown) {
                this.tweens.add({
                    targets: this.hintButton,
                    scale: 0.9,
                    duration: 100,
                    yoyo: true,
                    onComplete: () => {
                        this.useHint();
                        this.hintButton.setAlpha(0.5);
                        this.hintButton.clearTint();
                        if (this.hintButtonTween) {
                            this.hintButtonTween.stop();
                            this.hintButtonTween = null;
                        }
                    }
                });
            } else {
                this.tweens.add({
                    targets: this.hintButton,
                    angle: { from: -5, to: 5 },
                    duration: 100,
                    yoyo: true,
                    repeat: 2,
                    onComplete: () => {
                        this.hintButton.setAngle(0);
                    }
                });
            }
        });
    
        // Проверка доступности подсказки
        this.time.addEvent({
            delay: 1000,
            callback: () => {
                const currentTime = Date.now();
                if (currentTime - this.lastHintTime >= this.hintCooldown) {
                    this.hintButton.setAlpha(1);
                    if (!this.hintButtonTween) {
                        createPulseTween();
                    }
                }
            },
            loop: true
        });
    
        // Начальное состояние
        if (Date.now() - this.lastHintTime < this.hintCooldown) {
            this.hintButton.setAlpha(0.5);
            this.hintButton.clearTint();
        } else {
            createPulseTween();
        }
    }
    
    handleDependentObjects(parentObjectName) {
        this.state.remainingObjects.forEach(obj => {
            if (obj.dependsOn === parentObjectName) {
                this.updateItemList(); // Обновляем список предметов
                console.log(`Предмет ${obj.name} стал доступен после взаимодействия с ${parentObjectName}`);
            }
        });
    }

    animateObjectDisappearance(object) {
        if (!object || !object.scene) {
            return;
        }
    
        object.setTint(GAME_CONFIG.colors.success);
    
        // Анимация увеличения
        this.tweens.add({
            targets: object,
            scale: 1.5,
            duration: 350,
            ease: 'Power1',
            onComplete: () => {
                // Анимация исчезновения
                this.tweens.add({
                    targets: object,
                    alpha: 0,
                    duration: 350,
                    ease: 'Power1',
                    onComplete: () => {
                        if (object.name === 'Кольцо') {
                            this.state.ringFound = true;
                        }
                        
                        if (!this.state.foundObjects.includes(object.name)) {
                            this.state.foundObjects.push(object.name);
                        }
                        
                        this.updateItemList();
                        
                        if (object.scene) {
                            object.destroy();
                        }
                    }
                });
            }
        });
    
        this.state.idleTime = 0;
        this.hintButton.clearTint();
    }
    
    showPopup(object, imageKey, addToInventory = false) {
        this.createPopup({
            background: 'popup-bg-item', // ключ фонового изображения дневника
            content: imageKey,           // ключ контента (например, страница или запись)
            x: GAME_CONFIG.width / 2,    // центр по горизонтали
            y: GAME_CONFIG.height / 2,   // центр по вертикали
            onClose: () => {
                if (addToInventory && imageKey === 'list2') {
                    this.addToInventory('list2', 'Развернутый лист');
                }
                if (object) {
                    object.isAnimating = false;
                    this.animateObjectDisappearance(object);
             }
            }
        });
    }
    
    reopenPopup(scene) {
        if (!scene) return;

        this.currentPopupInfo = {
            object: null,
            imageKey: 'list2',
            addToInventory: false,
            isFirstOpen: false
        };

        this.popupGroup = scene.add.group(); // Группа для всех элементов попапа

        const popupBackground = scene.add.rectangle(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2,
            GAME_CONFIG.width,
            GAME_CONFIG.height,
            0x000000,
            0.7
        ).setDepth(998)
        .setInteractive(); // затемнённый фон
        this.popupGroup.add(popupBackground);

        const popupFrame = scene.add.image(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2,
            'popup-bg-item'
        ).setDepth(999); // фон дневника (оригинальный размер)
        this.popupGroup.add(popupFrame);

        const popupImage = scene.add.image(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2,
            'list2'
        ).setInteractive()
        .setDepth(1000)
        .setOrigin(0.5); // контент дневника (оригинальный размер)
        this.popupGroup.add(popupImage);

        const closeButton = scene.add.image(
            // Кнопка закрытия относительно центра и размеров попапа
            GAME_CONFIG.width / 2 + (popupFrame.width ? popupFrame.width / 2 - 40 : 300),
            GAME_CONFIG.height / 2 - (popupFrame.height ? popupFrame.height / 2 - 40 : 200),
            'close'
        ).setDepth(1001)
        .setInteractive({ pixelPerfect: true })
        .setOrigin(0.5);
        this.popupGroup.add(closeButton);

        closeButton.on('pointerover', () => closeButton.setTint(0xcccccc));
        closeButton.on('pointerout', () => closeButton.clearTint());
        closeButton.on('pointerdown', () => closeButton.setScale(0.95));
        closeButton.on('pointerup', () => {
            closeButton.setScale(1);
            closeButton.clearTint();
            this.closePopup();
        });

        // Закрытие по клику на фон или изображение
        const backgroundHandler = () => this.closePopup();
        popupImage.on('pointerdown', backgroundHandler);
        popupBackground.on('pointerdown', backgroundHandler);
    }
    
    closePopup() {
        if (this.popupGroup) {
            this.popupGroup.getChildren().forEach(child => child.removeAllListeners()); // Удаляем все обработчики событий
            this.popupGroup.clear(true, true); // Очищаем группу
            this.popupGroup = null;
    
            if (this.currentPopupInfo && 
                this.currentPopupInfo.imageKey === 'list2' && 
                this.currentPopupInfo.isFirstOpen) {
                this.time.delayedCall(100, () => {
                    if (this.journalSystem) {
                        this.journalSystem.showNewEntryEffect(); // Показываем эффект на кнопке дневника
                    }
                });
            }
    
            this.currentPopupInfo = null; // Очищаем информацию о текущем popup
        }
    }

    createMenuButton() {
        const menuButton = this.add.sprite(75, 70, 'menu-btn')
            .setInteractive({ useHandCursor: true })
            .setDepth(1000);

        menuButton.on('pointerover', () => {
            menuButton.setScale(1.1);
        });

        menuButton.on('pointerout', () => {
            menuButton.setScale(1);
        });

        menuButton.on('pointerdown', () => {
            menuButton.setTint(0xcccccc);
        });

        menuButton.on('pointerup', () => {
            menuButton.clearTint();
            this.cameras.main.fadeOut(1000);
            this.time.delayedCall(1000, () => {
                this.scene.start('MainMenuScene');
            });
        });

        return menuButton;
    }

    addToInventory(key, name, restoring = false) {
        // Не добавлять дубликаты (если не восстановление)
        if (this.state.inventory.some(item => item.key === key) && !restoring) return false;

        // Найти свободный слот
        const freeSlot = this.inventory.slots.find(slot => !slot.item);
        if (!freeSlot) return false;

        // Создать спрайт предмета
        const itemSprite = this.add.sprite(freeSlot.x, freeSlot.y, key)
            .setOrigin(0.5)
            .setScrollFactor(0)
            .setDepth(1001)
            .setVisible(true)
            .setInteractive();

        // Масштабировать под размер слота
        const desiredSize = this.inventory.config.slotSize || 64;
        const scale = Math.min(
            desiredSize / itemSprite.width,
            desiredSize / itemSprite.height
        );
        itemSprite.setScale(scale);

        // Клик по предмету — показать попап
        itemSprite.on('pointerdown', () => {
            this.showItemPopup(key, name);
        });

        // Привязать к слоту и массиву
        freeSlot.item = itemSprite;
        this.inventory.items.push(itemSprite);

        // Добавить в state.inventory, если не восстанавливаем
        if (!restoring) {
            this.state.inventory.push({ key, name });
            if (this.journalSystem) {
                this.journalSystem.addEntry(`Найден предмет: ${name}`);
            }
        }

        return true;
    }

    openSafe() { // Открытие интерфейса сейфа
        this.codeInputGroup = this.add.group();

        let background = this.add.rectangle(350, 241, 400, 200, 0x000000, 0.8); // Создание фона для интерфейса сейфа
        this.codeInputGroup.add(background);

        let digitTexts = [];

        for (let i = 0; i < 4; i++) { // Создание полей для ввода цифр кода
            let digitText = this.add.text(250 + i * 50, 220, this.state.selectedDigits[i], { 
                fontSize: '32px', 
                fill: '#fff' 
            }).setInteractive();
            
            digitText.index = i;
            digitText.on('pointerdown', () => {
                this.incrementDigit(digitText);
            });
            
            this.codeInputGroup.add(digitText);
            digitTexts.push(digitText);
        }

        let instructions = this.add.text(250, 180, 'Выставьте код:', { // Добавление инструкции
            fontSize: '24px', 
            fill: '#fff' 
        });
        this.codeInputGroup.add(instructions);

        let confirmButton = this.add.text(350, 280, 'ОК', { // Создание кнопки подтверждения
            fontSize: '32px', 
            fill: '#00ff00' 
        }).setInteractive();
        confirmButton.on('pointerdown', () => this.checkCode(digitTexts));
        this.codeInputGroup.add(confirmButton);

        let closeButton = this.add.text(450, 180, 'X', { // Создание кнопки закрытия
            fontSize: '32px', 
            fill: '#ff0000' 
        }).setInteractive();
        closeButton.on('pointerdown', () => this.closeCodeInput());
        this.codeInputGroup.add(closeButton);
    }

    incrementDigit(digitText) { // Увеличение значения цифры в коде сейфа
        let currentDigit = parseInt(digitText.text);
        if (isNaN(currentDigit)) currentDigit = 0;
        currentDigit = (currentDigit + 1) % 10;  // Циклическое изменение от 0 до 9
        digitText.setText(currentDigit.toString());
        this.state.selectedDigits[digitText.index] = currentDigit.toString();
    }

    checkCode(digitTexts) {
        try {
            // Получаем введенный код и правильный код
            const enteredCode = this.state.selectedDigits.join('');
            const correctCode = GAME_CONFIG.safeCode.join('');
            console.log('Введенный код:', enteredCode);
            console.log('Правильный код:', correctCode);
    
            if (enteredCode === correctCode) {
                // Визуальная обратная связь - подсветка правильного кода зеленым
                digitTexts.forEach(digitText => 
                    digitText.setFill('#' + GAME_CONFIG.colors.success.toString(16))
                );
    
                // Закрываем интерфейс ввода кода
                this.closeCodeInput();
    
                // Создаем группу для открытого сейфа и кольца
                const safeGroup = this.add.group();
    
                // Создаем затемненный фон
                const safeBackground = this.add.rectangle(
                    350, 241,    // координаты центра
                    700, 482,    // размеры
                    0x000000,    // цвет
                    0.5         // прозрачность
                ).setDepth(1000);
                safeGroup.add(safeBackground);
    
                // Показываем изображение открытого сейфа
                const openSafeImage = this.add.image(350, 241, 'opensafe')
                    .setScale(0.8)
                    .setDepth(1001)
                    .setInteractive();
                safeGroup.add(openSafeImage);
    
                // Находим объект кольца в списке оставшихся предметов
                const ringObject = this.state.remainingObjects.find(obj => obj.name === 'Кольцо');
                
                // Если кольцо найдено в списке, делаем его доступным
                if (ringObject) {
                    ringObject.available = true;
                    ringObject.hidden = false; // Убираем флаг скрытости
                    this.updateItemList(); // Обновляем список предметов (цвет изменится на белый)
                }
    
                // Если кольцо еще не было найдено игроком
                if (!this.state.ringFound) {
                    console.log('Создаем кольцо...');
                    // Создаем спрайт кольца в открытом сейфе
                    this.ringObject = this.add.sprite(353, 236, 'object8')
                        .setDepth(1002)
                        .setInteractive();
                    this.ringObject.name = 'Кольцо';
                    
                    // Добавляем обработчик клика на кольцо
                    this.ringObject.on('pointerdown', () => {
                        console.log('Клик по кольцу');
                        this.handleObjectClick(this.ringObject);
                        safeGroup.destroy(true); // Закрываем сейф после взятия кольца
                    });
    
                    safeGroup.add(this.ringObject);
                    console.log('Кольцо создано:', this.ringObject);
                }
    
                // Добавляем обработчик закрытия сейфа
                openSafeImage.on('pointerdown', () => {
                    if (this.state.ringFound) {
                        safeGroup.destroy(true); // Закрываем сейф только если кольцо уже найдено
                    }
                });
    
                // Удаляем записку с кодом из инвентаря
                this.removeFromInventory('list2');
    
            } else {
                // Визуальная обратная связь - подсветка неправильного кода красным
                digitTexts.forEach(digitText => 
                    digitText.setFill('#' + GAME_CONFIG.colors.error.toString(16))
                );
                
                // Через секунду сбрасываем код и возвращаем белый цвет
                setTimeout(() => {
                    digitTexts.forEach(digitText => digitText.setFill('#fff'));
                    this.resetDigits(digitTexts);
                }, 1000);
            }
        } catch (error) {
            // Обработка возможных ошибок
            console.error('Ошибка в методе checkCode:', error);
            console.error(error.stack);
        }
    }

    resetDigits(digitTexts) { // Сброс введенных цифр кода
        this.state.selectedDigits = ["0", "0", "0", "0"];
        digitTexts.forEach((digitText, i) => {
            digitText.setText("0");
            this.state.selectedDigits[i] = "0";
        });
    }

    closeCodeInput() { // Закрытие интерфейса ввода кода
        if (this.codeInputGroup) {
            this.codeInputGroup.clear(true, true);
            this.codeInputGroup = null;
        }
    }

    updateItemList() {
        // Проверяем существование списка предметов
        if (!this.itemList) return;
    
        // Делим предметы на две колонки
        const itemsPerColumn = Math.ceil(this.state.remainingObjects.length / 2);
        const leftColumnItems = this.state.remainingObjects.slice(0, itemsPerColumn);
        const rightColumnItems = this.state.remainingObjects.slice(itemsPerColumn);
    
        // Очищаем существующие текстовые объекты, если они есть
        if (this.itemTextObjects) {
            this.itemTextObjects.forEach(textObj => textObj.destroy());
        }
        this.itemTextObjects = [];

        const topPadding = 5; // Минимальный отступ сверху
        const itemSpacing = 20; // Расстояние между элементами

        // Создаем или обновляем фон
        if (!this.textBackground) {
            this.textBackground = this.add.rectangle(
                GAME_CONFIG.width / 2,
                topPadding,
                320,
                200,
                0x000000,
                0.8
            ).setOrigin(0.5, 0);
        }
        
        this.textBackground.setDepth(0);

        // Создаем отдельные текстовые объекты для каждого предмета
        leftColumnItems.forEach((item, index) => {
            // Позиция для левой колонки
            const x = GAME_CONFIG.width / 2 - 140;
            const y = topPadding + 10 + (index * itemSpacing);
            
            // Определяем стиль текста в зависимости от состояния предмета
            const textStyle = {
                fontSize: '13px',
                fill: this.getItemColor(item),
                textDecoration: this.state.foundObjects.includes(item.name) ? 'line-through' : ''
            };
            
            // Создаем текстовый объект для левого элемента
            const textItem = this.add.text(x, y, item.name, textStyle).setDepth(1);
            
            // Если предмет найден, добавляем зачеркивание
            if (this.state.foundObjects.includes(item.name)) {
                const strikethrough = this.add.graphics();
                strikethrough.lineStyle(1, 0x808080); // Серая линия
                strikethrough.lineBetween(
                    x, 
                    y + textItem.height / 2,
                    x + textItem.width,
                    y + textItem.height / 2
                );
                strikethrough.setDepth(2);
                this.itemTextObjects.push(strikethrough);
            }
            
            this.itemTextObjects.push(textItem);
            
            // Если есть правый элемент, создаем его тоже
            if (rightColumnItems[index]) {
                const rightItem = rightColumnItems[index];
                const rightX = GAME_CONFIG.width / 2 + 20;
                
                // Определяем стиль текста для правого элемента
                const rightTextStyle = {
                    fontSize: '13px',
                    fill: this.getItemColor(rightItem),
                    textDecoration: this.state.foundObjects.includes(rightItem.name) ? 'line-through' : ''
                };
                
                // Создаем текстовый объект для правого элемента
                const rightTextItem = this.add.text(rightX, y, rightItem.name, rightTextStyle).setDepth(1);
                
                // Если правый предмет найден, добавляем зачеркивание
                if (this.state.foundObjects.includes(rightItem.name)) {
                    const strikethrough = this.add.graphics();
                    strikethrough.lineStyle(1, 0x808080); // Серая линия
                    strikethrough.lineBetween(
                        rightX,
                        y + rightTextItem.height / 2,
                        rightX + rightTextItem.width,
                        y + rightTextItem.height / 2
                    );
                    strikethrough.setDepth(2);
                    this.itemTextObjects.push(strikethrough);
                }
                
                this.itemTextObjects.push(rightTextItem);
            }
        });
    
        // Очищаем старый текст в основном контейнере
        this.itemList.setText('');
    
        // Обновляем позицию основного контейнера
        this.itemList.setPosition(GAME_CONFIG.width / 2, topPadding);
        this.itemList.setOrigin(0.5, 0);

        // Рассчитываем высоту содержимого
        const contentHeight = (leftColumnItems.length * itemSpacing) + 20;
        
        // Обновляем размер и позицию фона
        this.textBackground.setSize(320, contentHeight);
        this.textBackground.setPosition(
            GAME_CONFIG.width / 2,
            topPadding
        );
    }

    // Добавьте этот вспомогательный метод в класс
    getItemColor(item) {
    if (this.state.foundObjects.includes(item.name)) {
        return '#808080'; // Серый цвет для найденных предметов
    }
    if (item.hidden && !item.available) {
        return '#ff0000'; // Красный цвет для скрытых недоступных предметов
    }
    return '#ffffff'; // Белый цвет для обычных предметов
    }

    removeFromInventory(itemKey) {
        // Находим слот с предметом
        const slotIndex = this.inventory.slots.findIndex(slot => slot.item && slot.item.key === itemKey);
        if (slotIndex === -1) return false;

        // Удаляем спрайт предмета
        const itemSprite = this.inventory.slots[slotIndex].item;
        itemSprite.destroy();

        // Очищаем слот
        this.inventory.slots[slotIndex].item = null;

        // Удаляем из массивов
        this.inventory.items = this.inventory.items.filter(item => item !== itemSprite);
        this.state.inventory = this.state.inventory.filter(item => item.key !== itemKey);

        return true;
    }
    
    showObjectHint() {
        // Фильтруем список, оставляя только ненайденные предметы
        const availableObjects = this.state.remainingObjects.filter(obj => 
            !this.state.foundObjects.includes(obj.name) && (!obj.hidden || obj.available)
        );
    
        if (availableObjects.length > 0) {
            // Выбираем один случайный предмет из доступных
            const randomIndex = Math.floor(Math.random() * availableObjects.length);
            const hintObject = availableObjects[randomIndex];
            const sprite = this.children.list.find(child => child.name === hintObject.name);
    
            if (sprite) {
                const graphics = this.add.graphics();
                graphics.lineStyle(2, GAME_CONFIG.colors.hint, 1); // Используем золотой цвет
                graphics.strokeRect(sprite.x - sprite.width / 2, sprite.y - sprite.height / 2, 
                                  sprite.width, sprite.height);
                graphics.fillStyle(GAME_CONFIG.colors.hint, 0.3); // Полупрозрачная заливка
                graphics.fillRect(sprite.x - sprite.width / 2, sprite.y - sprite.height / 2, 
                                  sprite.width, sprite.height);
    
                this.tweens.add({
                    targets: graphics,
                    alpha: 0,
                    duration: 1000,
                    onComplete: () => {
                        graphics.destroy();
                    }
                });
            }
        }
    }
    
    showNavigationHint() {
        // Получаем текущую локацию
        const currentLocation = locationPaths[this.location];
        let possibleDirections = [];
        
        // Собираем все возможные направления
        if (currentLocation.forwardTo.length > 0) {
            possibleDirections = possibleDirections.concat(currentLocation.forwardTo);
        }
        if (currentLocation.backTo.length > 0) {
            possibleDirections = possibleDirections.concat(currentLocation.backTo);
        }
    
        if (possibleDirections.length > 0) {
            // Выбираем случайное направление
            const randomDirection = possibleDirections[Math.floor(Math.random() * possibleDirections.length)];
            
            // Находим соответствующую зону перехода
            const transition = locationMap[this.location].transitions[randomDirection];
            
            if (transition) {
                const points = transition.points;
                
                // Создаем подсветку зоны перехода
                const graphics = this.add.graphics();
                graphics.lineStyle(2, GAME_CONFIG.colors.hint, 1);
                graphics.beginPath();
                graphics.moveTo(points[0].x, points[0].y);
                
                // Рисуем контур зоны
                points.forEach((point, index) => {
                    const nextPoint = points[(index + 1) % points.length];
                    graphics.lineTo(nextPoint.x, nextPoint.y);
                });
                
                graphics.closePath();
                graphics.strokePath();
                
                // Добавляем полупрозрачную заливку
                graphics.fillStyle(GAME_CONFIG.colors.hint, 0.3);
                graphics.fillPath();
    
                // Анимация исчезновения
                this.tweens.add({
                    targets: graphics,
                    alpha: 0,
                    duration: 1000,
                    onComplete: () => {
                        graphics.destroy();
                    }
                });
            }
        }
    }

    getItemListText() {
        const itemsPerColumn = Math.ceil(this.state.remainingObjects.length / 2);
        const leftColumnItems = this.state.remainingObjects.slice(0, itemsPerColumn);
        const rightColumnItems = this.state.remainingObjects.slice(itemsPerColumn);
    
        const leftColumn = leftColumnItems.map(obj => obj.name);
        const rightColumn = rightColumnItems.map(obj => obj.name);
        
        const maxLength = Math.max(
            ...leftColumn.map(item => item.length),
            ...rightColumn.map(item => item.length)
        );
    
        return leftColumn.map((item, index) => {
            const rightItem = rightColumn[index] || '';
            return `${item.padEnd(maxLength + 5)}${rightItem}`;
        }).join('\n');
    }

    createPopup({ 
        background = 'popup-bg',  
        content = '',            
        contentScale = 0.8,      
        onClose = null,          
        customWidth = 700,       
        customHeight = 482,      
        x = GAME_CONFIG.width / 2,  
        y = GAME_CONFIG.height / 2,  
        closeButton = true       
    } = {}) {
        if (this.popupGroup) {
            this.closePopup();
        }
    
        this.popupGroup = this.add.group();
    
        // Создаем затемнение на весь экран
        const darkOverlay = this.add.rectangle(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2,
            GAME_CONFIG.width,
            GAME_CONFIG.height,
            0x000000,
            0.7
        ).setInteractive()
         .setDepth(102);
        this.popupGroup.add(darkOverlay);
    
        // Добавляем фоновое изображение попапа
        if (background) {
            const popupBackground = this.add.image(x, y, background)
                .setDepth(103)
                .setOrigin(0.5, 0.5);
            popupBackground.setDisplaySize(customWidth, customHeight);
            this.popupGroup.add(popupBackground);
        }
    
        // Если есть контент, добавляем его
        if (content) {
            const contentImage = this.add.image(x, y, content)
                .setInteractive()
                .setDepth(103)
                .setOrigin(0.5, 0.5);
            contentImage.setScale(contentScale);
            this.popupGroup.add(contentImage);
        }
    
        // Добавляем кнопку закрытия
        if (closeButton) {
            const closeBtn = this.add.sprite(
                x + (customWidth / 2 - 20),
                y - (customHeight / 2 - 20),
                'close'
            ).setDepth(103);
            
            closeBtn.setScale(0.5);
            closeBtn.setInteractive();
            this.popupGroup.add(closeBtn);
    
            // Обработчики для кнопки закрытия
            closeBtn.on('pointerover', () => {
                if (!closeBtn.isTinted) {
                    closeBtn.setTint(0xcccccc);
                }
            });
    
            closeBtn.on('pointerout', () => {
                if (this.popupGroup) {
                    closeBtn.clearTint();
                    closeBtn.setScale(0.5);
                }
            });
    
            closeBtn.on('pointerdown', () => {
                if (this.popupGroup) {
                    closeBtn.setScale(0.45);
                    closeBtn.setTint(0x999999);
                }
            });
    
            closeBtn.on('pointerup', () => {
                if (this.popupGroup) {
                    closeBtn.setScale(0.5);
                    closeBtn.clearTint();
                    this.closePopup();
                }
            });
        }
    
        // Обработчик клика по затемнению
        darkOverlay.on('pointerdown', () => {
            this.closePopup();
        });
    
        // Сохраняем callback закрытия
        if (onClose) {
            this.popupGroup.onClose = onClose;
        }
    
        return this.popupGroup;
    }
    
    closePopup() {
        if (!this.popupGroup) return;
        
        // Вызываем callback если он есть
        if (this.popupGroup.onClose) {
            this.popupGroup.onClose();
        }
    
        this.popupGroup.clear(true, true);
        this.popupGroup = null;
    }
}

const config = {
    type: Phaser.AUTO,
    parent: 'game-container',
    scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH,
        width: 1920,
        height: 1080
    },
    scene: [LogoScene, GameTitleScene, MainMenuScene, LoadingScene, GameScene], // Добавили LogoScene первой
    physics: {
        default: 'arcade',
        arcade: {
            debug: false
        }
    }
};

// Запуск игры
const game = new Phaser.Game(config);

// === ResourceLoader ===
// Класс для загрузки ресурсов. Он упрощает процесс загрузки изображений в сценах.
class ResourceLoader {
    constructor(scene) {
        this.scene = scene; // Сохраняем ссылку на текущую сцену.
    }

    // Метод для загрузки ресурсов.
    loadResources(resourceCategories) {
        // Проходимся по каждой категории ресурсов.
        Object.entries(resourceCategories).forEach(([category, resources]) => {
            // Загружаем каждый ресурс в категории.
            resources.forEach(({ key, path }) => {
                this.scene.load.image(key, path); // Загружаем изображение по ключу и пути.
            });
        });
    }
}
