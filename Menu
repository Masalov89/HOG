class MainMenuScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MainMenuScene' });
        this.currentLanguage = 'en';
        this.languages = ['en', 'ua'];
        this.buttonLabels = {
            ua: ['ГРАТИ', 'ДОСЯГНЕННЯ', 'НАЛАШТУВАННЯ', 'ДОПОМОГА']
        };
        this.stories = JSON.parse(JSON.stringify(STORIES_CONFIG));
        this.musicVolume = 0.5;
        this.currentMenuState = 'main';
        this.selectedStory = null;
        this.activeButtonIndex = -1; // Индекс активной кнопки (-1 означает нет активной)
    }

    preload() {
        this.load.image('main-bg', './Assets/Backgrounds/MainMenu/main-bg.jpg');
        this.load.image('play-btn', './Assets/ApprovedUI/play-btn.png');
        this.load.image('achiev-btn', './Assets/ApprovedUI/achiev-btn.png');
        this.load.image('options-btn', './Assets/ApprovedUI/options-btn.png');
        this.load.image('help-btn', './Assets/ApprovedUI/help-btn.png');
        this.load.image('btn-glow', './Assets/ApprovedUI/btn-glow.png');
        this.load.audio('main-music', './Assets/Backgrounds/MainMenu/Audio/main-menu-music.mp3');
    }

    create() {
        this.cameras.main.fadeIn(1000);
        this.add.image(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2, 'main-bg')
            .setDisplaySize(GAME_CONFIG.width, GAME_CONFIG.height);

        this.backgroundMusic = this.sound.add('main-music', { 
            loop: true, 
            volume: this.musicVolume 
        });
        this.backgroundMusic.play();

        // Создаем контейнер для модальных окон
        this.modalContainer = this.add.container(0, 0).setDepth(100).setVisible(false);
        
        // Основная панель модального окна
        this.modalPanel = this.add.rectangle(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2,
            800, 600,
            0x181818, 0.95
        ).setStrokeStyle(4, 0xffd700);
        this.modalContainer.add(this.modalPanel);

        // Заголовок модального окна
        this.modalTitle = this.add.text(
            GAME_CONFIG.width / 2,
            GAME_CONFIG.height / 2 - 250,
            '',
            { font: '36px Arial', color: '#FFD700' }
        ).setOrigin(0.5);
        this.modalContainer.add(this.modalTitle);

        // Кнопка закрытия
        this.createCloseButton();

        // Контейнер для контента
        this.modalContent = this.add.container(0, 0);
        this.modalContainer.add(this.modalContent);

        this.createMainMenu();
        this.createEnergyDisplay();
    }

    createCloseButton() {
        this.modalCloseBtn = this.add.text(
            GAME_CONFIG.width / 2 + 350,
            GAME_CONFIG.height / 2 - 280,
            '×',
            { font: '48px Arial', color: '#FFD700' }
        ).setOrigin(0.5).setInteractive({ useHandCursor: true })
         .on('pointerdown', () => {
             this.closeModal();
         });
        this.modalContainer.add(this.modalCloseBtn);
    }

    createEnergyDisplay() {
        this.energy = 400;
        this.energyBar = this.add.rectangle(150, 1030, 400, 30, 0xffd700).setOrigin(0, 0.5);
        this.energyText = this.add.text(570, 1030, `${this.energy}/400`, {
            font: '28px Arial',
            color: '#FFD700'
        }).setOrigin(0, 0.5);
    }

    createMainMenu() {
        this.menuButtons = [
            { key: 'play-btn', width: 210, height: 75 },
            { key: 'achiev-btn', width: 296, height: 75 },
            { key: 'options-btn', width: 336, height: 75 },
            { key: 'help-btn', width: 223, height: 75 }
        ];

        const BASE_OVAL_WIDTH = 430;
        const BASE_OVAL_HEIGHT = 120;
        const BUTTON_HOVER_SCALE = 1.15;
        const spacing = 100;
        const totalWidth = this.menuButtons.reduce((sum, btn) => sum + btn.width, 0) +
            spacing * (this.menuButtons.length - 1);

        let currentX = (GAME_CONFIG.width - totalWidth) / 2 + this.menuButtons[0].width / 2;
        const y = 100;

        this.menuBtnObjs = [];
        this.menuBtnLabels = [];
        this.menuBtnGlows = [];

        const labels = this.currentLanguage === 'ua' ? this.buttonLabels.ua : ['', '', '', ''];

        this.menuButtons.forEach((btnInfo, i) => {
            const glowWidth = btnInfo.width * BUTTON_HOVER_SCALE + 40;
            const glowHeight = btnInfo.height * BUTTON_HOVER_SCALE + 30;
            const scaleX = glowWidth / BASE_OVAL_WIDTH;
            const scaleY = glowHeight / BASE_OVAL_HEIGHT;

            const glow = this.add.image(currentX, y, 'btn-glow')
                .setOrigin(0.5)
                .setScale(scaleX, scaleY)
                .setAlpha(0)
                .setDepth(0);

            const btn = this.add.sprite(currentX, y, btnInfo.key)
                .setOrigin(0.5)
                .setDisplaySize(btnInfo.width, btnInfo.height)
                .setInteractive({ useHandCursor: true })
                .setScale(1)
                .setDepth(1);

            this.setupButtonEffects(btn, glow, i);

            let label = null;
            if (labels[i] && this.currentLanguage === 'ua') {
                label = this.add.text(currentX, y + btnInfo.height / 2 + 30, labels[i], {
                    font: '28px Arial',
                    color: '#FFD700'
                }).setOrigin(0.5);
            }

            this.menuBtnObjs.push(btn);
            this.menuBtnLabels.push(label);
            this.menuBtnGlows.push(glow);

            if (i < this.menuButtons.length - 1) {
                currentX += (btnInfo.width / 2) + (this.menuButtons[i + 1].width / 2) + spacing;
            }
        });
    }

    setupButtonEffects(btn, glow, btnIndex) {
        btn.on('pointerover', () => {
            // Показываем эффекты при наведении только если кнопка не активна
            if (this.activeButtonIndex !== btnIndex) {
                this.tweens.add({
                    targets: glow,
                    alpha: 1,
                    duration: 160,
                    ease: 'Cubic.easeOut'
                });
                this.tweens.add({
                    targets: btn,
                    scale: 1.10,
                    duration: 160,
                    ease: 'Cubic.easeOut'
                });
            }
        });

        btn.on('pointerout', () => {
            // Убираем эффекты при уходе курсора только если кнопка НЕ активна
            if (this.activeButtonIndex !== btnIndex) {
                this.tweens.add({
                    targets: glow,
                    alpha: 0,
                    duration: 160,
                    ease: 'Cubic.easeIn'
                });
                this.tweens.add({
                    targets: btn,
                    scale: 1,
                    duration: 160,
                    ease: 'Cubic.easeIn'
                });
            }
        });

        btn.on('pointerdown', () => this.menuClick(btnIndex));
    }

    // Функция для сброса активного состояния всех кнопок
    resetActiveButton() {
        if (this.activeButtonIndex >= 0) {
            const prevBtn = this.menuBtnObjs[this.activeButtonIndex];
            const prevGlow = this.menuBtnGlows[this.activeButtonIndex];
            
            // Останавливаем все текущие твины для этой кнопки
            this.tweens.killTweensOf([prevBtn, prevGlow]);
            
            // Анимируем возврат к обычному состоянию
            this.tweens.add({
                targets: prevGlow,
                alpha: 0,
                duration: 160,
                ease: 'Cubic.easeIn'
            });
            this.tweens.add({
                targets: prevBtn,
                scale: 1,
                duration: 160,
                ease: 'Cubic.easeIn'
            });
        }
        this.activeButtonIndex = -1;
    }

    // Функция для установки активного состояния кнопки
    setActiveButton(btnIndex) {
        if (btnIndex >= 0 && btnIndex < this.menuBtnObjs.length) {
            this.activeButtonIndex = btnIndex;
            const btn = this.menuBtnObjs[btnIndex];
            const glow = this.menuBtnGlows[btnIndex];
            
            // Останавливаем все текущие твины для этой кнопки
            this.tweens.killTweensOf([btn, glow]);
            
            // Устанавливаем активное состояние (такое же как при hover)
            this.tweens.add({
                targets: glow,
                alpha: 1,
                duration: 160,
                ease: 'Cubic.easeOut'
            });
            this.tweens.add({
                targets: btn,
                scale: 1.10,
                duration: 160,
                ease: 'Cubic.easeOut'
            });
        }
    }

    menuClick(btnIndex) {
        // Сначала сбрасываем предыдущую активную кнопку
        this.resetActiveButton();
        
        // Устанавливаем новую активную кнопку
        this.setActiveButton(btnIndex);
        
        // Открываем соответствующее модальное окно
        switch(btnIndex) {
            case 0: this.showPlayModal(); break;
            case 1: this.showAchievementsModal(); break;
            case 2: this.showOptionsModal(); break;
            case 3: this.showHelpModal(); break;
        }
    }

    // Открытие модального окна
    openModal(title) {
        // Сначала очищаем предыдущий контент
        this.modalContent.removeAll(true);
        
        this.modalTitle.setText(title);
        this.modalContainer.setVisible(true);
        return this.modalContent;
    }

    // Закрытие модального окна
    closeModal() {
        this.modalContainer.setVisible(false);
        this.modalContent.removeAll(true);
        this.selectedStory = null;
        
        // Сбрасываем активное состояние всех кнопок при закрытии модального окна
        this.resetActiveButton();
    }

    showPlayModal() {
        const content = this.openModal('ВЫБОР ИСТОРИИ');
        
        if (!this.selectedStory) {
            this.showStoriesList(content);
        } else {
            this.showChaptersList(content);
        }
    }

    showStoriesList(content) {
        const startY = GAME_CONFIG.height / 2 - 150;
        const stepY = 120;
        
        Object.entries(this.stories).forEach(([storyKey, story], i) => {
            const storyBtn = this.add.text(
                GAME_CONFIG.width / 2,
                startY + i * stepY,
                story.name,
                {
                    font: '32px Arial',
                    color: '#FFD700',
                    backgroundColor: '#333333',
                    padding: { left: 30, right: 30, top: 15, bottom: 15 }
                }
            ).setOrigin(0.5).setInteractive({ useHandCursor: true });

            storyBtn.on('pointerover', () => storyBtn.setColor('#FFF6A8').setScale(1.05));
            storyBtn.on('pointerout', () => storyBtn.setColor('#FFD700').setScale(1));
            storyBtn.on('pointerdown', () => {
                this.selectedStory = storyKey;
                content.removeAll(true);
                this.showChaptersList(content);
            });

            content.add(storyBtn);
        });
    }

    showChaptersList(content) {
        const story = this.stories[this.selectedStory];
        this.modalTitle.setText(story.name);
        
        const backBtn = this.add.text(
            GAME_CONFIG.width / 2 - 350,
            GAME_CONFIG.height / 2 - 280,
            '← Назад',
            { font: '24px Arial', color: '#FFD700' }
        ).setOrigin(0, 0.5).setInteractive({ useHandCursor: true });

        backBtn.on('pointerdown', () => {
            this.selectedStory = null;
            content.removeAll(true);
            this.showStoriesList(content);
        });
        content.add(backBtn);

        const startY = GAME_CONFIG.height / 2 - 100;
        const stepY = 80;

        story.chapters.forEach((chapter, i) => {
            let color, bgColor, interactive;
            switch (chapter.state) {
                case 'completed':
                    color = '#66ff66'; bgColor = '#2a5f2a'; interactive = false; break;
                case 'locked':
                    color = '#666666'; bgColor = '#222222'; interactive = false; break;
                default:
                    color = '#FFD700'; bgColor = '#333333'; interactive = true; break;
            }

            const chapterBtn = this.add.text(
                GAME_CONFIG.width / 2,
                startY + i * stepY,
                chapter.name,
                {
                    font: '28px Arial',
                    color: color,
                    backgroundColor: bgColor,
                    padding: { left: 25, right: 25, top: 12, bottom: 12 }
                }
            ).setOrigin(0.5);

            if (interactive) {
                chapterBtn.setInteractive({ useHandCursor: true })
                    .on('pointerover', () => chapterBtn.setColor('#FFF6A8').setScale(1.05))
                    .on('pointerout', () => chapterBtn.setColor('#FFD700').setScale(1))
                    .on('pointerdown', () => this.startChapter(chapter));
            }

            content.add(chapterBtn);
        });
    }

    startChapter(chapter) {
        this.scene.start('LoadingScene', {
            storyKey: this.selectedStory,
            chapterId: chapter.id,
            nextScene: 'GameScene',
            gameData: {
                location: chapter.startLocation,
                history: []
            }
        });
    }

    showAchievementsModal() {
        const content = this.openModal('ДОСТИЖЕНИЯ');
        
        const achievements = [
            { name: 'Первые шаги', description: 'Завершите первую главу', unlocked: true, icon: '🏆' },
            { name: 'Коллекционер', description: 'Соберите 10 предметов', unlocked: true, icon: '📦' },
            { name: 'Исследователь', description: 'Найдите 5 секретов', unlocked: false, icon: '🔍' }
        ];

        const startY = GAME_CONFIG.height / 2 - 200;
        achievements.forEach((achievement, i) => {
            const y = startY + i * 90;
            const bgColor = achievement.unlocked ? 0x2a5f2a : 0x333333;
            const textColor = achievement.unlocked ? '#90EE90' : '#888888';

            const achievementBg = this.add.rectangle(GAME_CONFIG.width / 2, y, 700, 70, bgColor)
                .setStrokeStyle(2, achievement.unlocked ? 0xffd700 : 0x555555);
            
            const achievementIcon = this.add.text(GAME_CONFIG.width / 2 - 300, y, achievement.icon, {
                font: '36px Arial'
            }).setOrigin(0.5);

            const achievementName = this.add.text(GAME_CONFIG.width / 2 - 200, y - 15, achievement.name, {
                font: '24px Arial',
                color: textColor
            }).setOrigin(0, 0.5);

            const achievementDesc = this.add.text(GAME_CONFIG.width / 2 - 200, y + 15, achievement.description, {
                font: '18px Arial',
                color: '#CCCCCC'
            }).setOrigin(0, 0.5);

            content.add([achievementBg, achievementIcon, achievementName, achievementDesc]);
        });
    }

    showOptionsModal() {
        const content = this.openModal('НАСТРОЙКИ');
        
        // Language selection
        const langTitle = this.add.text(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2 - 120, 'Мова / Language:', {
            font: '28px Arial',
            color: '#FFD700'
        }).setOrigin(0.5);
        content.add(langTitle);

        this.enBtn = this.add.text(GAME_CONFIG.width / 2 - 70, GAME_CONFIG.height / 2 - 70, 'EN', {
            font: '24px Arial',
            color: this.currentLanguage === 'en' ? '#FFD700' : '#999',
            backgroundColor: '#333333',
            padding: { left: 20, right: 20, top: 10, bottom: 10 }
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });

        this.uaBtn = this.add.text(GAME_CONFIG.width / 2 + 70, GAME_CONFIG.height / 2 - 70, 'UA', {
            font: '24px Arial',
            color: this.currentLanguage === 'ua' ? '#FFD700' : '#999',
            backgroundColor: '#333333',
            padding: { left: 20, right: 20, top: 10, bottom: 10 }
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });

        this.enBtn.on('pointerdown', () => this.switchLanguage('en'));
        this.uaBtn.on('pointerdown', () => this.switchLanguage('ua'));
        content.add([this.enBtn, this.uaBtn]);

        // Volume control
        const volumeTitle = this.add.text(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2 + 20, 'Гучність музики / Music Volume:', {
            font: '28px Arial',
            color: '#FFD700'
        }).setOrigin(0.5);
        content.add(volumeTitle);

        this.createVolumeSlider(GAME_CONFIG.width / 2, GAME_CONFIG.height / 2 + 70, content);
    }

    createVolumeSlider(x, y, content) {
        const sliderWidth = 300;
        const sliderBg = this.add.rectangle(x, y, sliderWidth, 10, 0x555555)
            .setStrokeStyle(2, 0xffd700);
        
        const fillWidth = sliderWidth * this.musicVolume;
        const sliderFill = this.add.rectangle(
            x - sliderWidth/2 + fillWidth/2, y, fillWidth, 10, 0xffd700
        );
        
        const knobX = x - sliderWidth/2 + sliderWidth * this.musicVolume;
        const sliderKnob = this.add.circle(knobX, y, 15, 0xffd700)
            .setStrokeStyle(3, 0xffffff)
            .setInteractive({ useHandCursor: true, draggable: true });
        
        const volumePercent = this.add.text(x, y + 40, `${Math.round(this.musicVolume * 100)}%`, {
            font: '24px Arial',
            color: '#FFD700'
        }).setOrigin(0.5);

        content.add([sliderBg, sliderFill, sliderKnob, volumePercent]);

        sliderKnob.on('drag', (pointer, dragX) => {
            const minX = x - sliderWidth/2;
            const maxX = x + sliderWidth/2;
            const clampedX = Phaser.Math.Clamp(dragX, minX, maxX);
            
            sliderKnob.x = clampedX;
            this.musicVolume = (clampedX - minX) / sliderWidth;
            
            sliderFill.setSize(sliderWidth * this.musicVolume, 10);
            sliderFill.x = x - sliderWidth/2 + (sliderWidth * this.musicVolume)/2;
            volumePercent.setText(`${Math.round(this.musicVolume * 100)}%`);
            
            this.backgroundMusic.setVolume(this.musicVolume);
        });

        sliderBg.setInteractive().on('pointerdown', (pointer) => {
            const localX = pointer.x;
            const minX = x - sliderWidth/2;
            const maxX = x + sliderWidth/2;
            const clampedX = Phaser.Math.Clamp(localX, minX, maxX);
            
            sliderKnob.x = clampedX;
            this.musicVolume = (clampedX - minX) / sliderWidth;
            
            sliderFill.setSize(sliderWidth * this.musicVolume, 10);
            sliderFill.x = x - sliderWidth/2 + (sliderWidth * this.musicVolume)/2;
            volumePercent.setText(`${Math.round(this.musicVolume * 100)}%`);
            
            this.backgroundMusic.setVolume(this.musicVolume);
        });
    }

    showHelpModal() {
        const content = this.openModal('ПОМОЩЬ');
        
        const helpSections = [
            {
                title: 'Как играть:',
                content: 'Выберите историю и главу для начала приключения.\nСледуйте сюжету и принимайте решения.'
            },
            {
                title: 'Навигация:',
                content: 'Используйте кнопки меню для перемещения по разделам.'
            }
        ];

        const startY = GAME_CONFIG.height / 2 - 180;
        helpSections.forEach((section, i) => {
            const y = startY + i * 120;

            const sectionTitle = this.add.text(GAME_CONFIG.width / 2, y, section.title, {
                font: '24px Arial',
                color: '#FFD700'
            }).setOrigin(0.5);

            const sectionContent = this.add.text(GAME_CONFIG.width / 2, y + 35, section.content, {
                font: '18px Arial',
                color: '#CCCCCC',
                align: 'center',
                wordWrap: { width: 650 }
            }).setOrigin(0.5);

            content.add([sectionTitle, sectionContent]);
        });
    }

    switchLanguage(lang) {
        if (!this.languages.includes(lang)) return;
        this.currentLanguage = lang;

        // Обновляем подписи кнопок главного меню
        const labels = this.currentLanguage === 'ua' ? this.buttonLabels.ua : ['', '', '', ''];
        
        this.menuBtnLabels.forEach((labelObj, i) => {
            if (labelObj) labelObj.destroy();
            
            if (labels[i] && this.currentLanguage === 'ua') {
                const btn = this.menuBtnObjs[i];
                this.menuBtnLabels[i] = this.add.text(
                    btn.x,
                    btn.y + this.menuButtons[i].height / 2 + 30,
                    labels[i],
                    { font: '28px Arial', color: '#FFD700' }
                ).setOrigin(0.5);
            } else {
                this.menuBtnLabels[i] = null;
            }
        });

        // Обновляем кнопки языка в настройках
        if (this.enBtn && this.uaBtn) {
            this.enBtn.setColor(this.currentLanguage === 'en' ? '#FFD700' : '#999');
            this.uaBtn.setColor(this.currentLanguage === 'ua' ? '#FFD700' : '#999');
        }
    }
}
